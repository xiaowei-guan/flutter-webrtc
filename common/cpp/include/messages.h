// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_H_
#define PIGEON_MESSAGES_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace flutter_webrtc_plugin {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class RTCPeerconnectionFactoryApi;
  friend class RtcPeerconnectionApi;
  friend class RTCDataChannelApi;
  friend class RTCDTMFSenderApi;
  friend class RTCRtpSenderApi;
  friend class RTCRtpTransceiverApi;
  friend class RTCVideoRendererApi;
  friend class MediaRecorderApi;
  friend class MediaStreamApi;
  friend class MediaStreamTrackApi;
  friend class DesktopCapturerSourceApi;
  friend class MediaDevices;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class SessionDescriptionMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  SessionDescriptionMessage();

  // Constructs an object setting all fields.
  explicit SessionDescriptionMessage(
    const std::string* sdp,
    const std::string* type);

  const std::string* sdp() const;
  void set_sdp(const std::string_view* value_arg);
  void set_sdp(std::string_view value_arg);

  const std::string* type() const;
  void set_type(const std::string_view* value_arg);
  void set_type(std::string_view value_arg);


 private:
  static SessionDescriptionMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<std::string> sdp_;
  std::optional<std::string> type_;

};


// Generated class from Pigeon that represents data sent in messages.
class ConstraintsMessage {
 public:
  // Constructs an object setting all fields.
  explicit ConstraintsMessage(const flutter::EncodableMap& constraints);

  const flutter::EncodableMap& constraints() const;
  void set_constraints(const flutter::EncodableMap& value_arg);


 private:
  static ConstraintsMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  flutter::EncodableMap constraints_;

};


// Generated class from Pigeon that represents data sent in messages.
class ConfigurationMessage {
 public:
  // Constructs an object setting all fields.
  explicit ConfigurationMessage(const flutter::EncodableMap& configurations);

  const flutter::EncodableMap& configurations() const;
  void set_configurations(const flutter::EncodableMap& value_arg);


 private:
  static ConfigurationMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  flutter::EncodableMap configurations_;

};


// Generated class from Pigeon that represents data sent in messages.
class MediaStreamMessage {
 public:
  // Constructs an object setting all fields.
  explicit MediaStreamMessage(
    const std::string& id,
    const std::string& owner_tag,
    const flutter::EncodableList& audio_tracks,
    const flutter::EncodableList& video_tracks);

  const std::string& id() const;
  void set_id(std::string_view value_arg);

  const std::string& owner_tag() const;
  void set_owner_tag(std::string_view value_arg);

  const flutter::EncodableList& audio_tracks() const;
  void set_audio_tracks(const flutter::EncodableList& value_arg);

  const flutter::EncodableList& video_tracks() const;
  void set_video_tracks(const flutter::EncodableList& value_arg);


 private:
  static MediaStreamMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string id_;
  std::string owner_tag_;
  flutter::EncodableList audio_tracks_;
  flutter::EncodableList video_tracks_;

};


// Generated class from Pigeon that represents data sent in messages.
class AudioTrackMessage {
 public:
  // Constructs an object setting all fields.
  explicit AudioTrackMessage(
    const std::string& id,
    const std::string& label,
    const std::string& kind,
    bool enabled,
    const AudioTrackSettingsMessage& settings);

  const std::string& id() const;
  void set_id(std::string_view value_arg);

  const std::string& label() const;
  void set_label(std::string_view value_arg);

  const std::string& kind() const;
  void set_kind(std::string_view value_arg);

  bool enabled() const;
  void set_enabled(bool value_arg);

  const AudioTrackSettingsMessage& settings() const;
  void set_settings(const AudioTrackSettingsMessage& value_arg);


 private:
  static AudioTrackMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string id_;
  std::string label_;
  std::string kind_;
  bool enabled_;
  AudioTrackSettingsMessage settings_;

};


// Generated class from Pigeon that represents data sent in messages.
class AudioTrackSettingsMessage {
 public:
  // Constructs an object setting all fields.
  explicit AudioTrackSettingsMessage(
    const std::string& device_id,
    const std::string& kind,
    bool auto_gain_control,
    bool echo_cancellation,
    bool noise_suppression,
    int64_t channel_count,
    int64_t latency);

  const std::string& device_id() const;
  void set_device_id(std::string_view value_arg);

  const std::string& kind() const;
  void set_kind(std::string_view value_arg);

  bool auto_gain_control() const;
  void set_auto_gain_control(bool value_arg);

  bool echo_cancellation() const;
  void set_echo_cancellation(bool value_arg);

  bool noise_suppression() const;
  void set_noise_suppression(bool value_arg);

  int64_t channel_count() const;
  void set_channel_count(int64_t value_arg);

  int64_t latency() const;
  void set_latency(int64_t value_arg);


 private:
  static AudioTrackSettingsMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class AudioTrackMessage;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string device_id_;
  std::string kind_;
  bool auto_gain_control_;
  bool echo_cancellation_;
  bool noise_suppression_;
  int64_t channel_count_;
  int64_t latency_;

};


// Generated class from Pigeon that represents data sent in messages.
class VideoTrackMessage {
 public:
  // Constructs an object setting all fields.
  explicit VideoTrackMessage(
    const std::string& id,
    const std::string& label,
    const std::string& kind,
    bool enabled,
    const VideoTrackSettingsMessage& settings);

  const std::string& id() const;
  void set_id(std::string_view value_arg);

  const std::string& label() const;
  void set_label(std::string_view value_arg);

  const std::string& kind() const;
  void set_kind(std::string_view value_arg);

  bool enabled() const;
  void set_enabled(bool value_arg);

  const VideoTrackSettingsMessage& settings() const;
  void set_settings(const VideoTrackSettingsMessage& value_arg);


 private:
  static VideoTrackMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string id_;
  std::string label_;
  std::string kind_;
  bool enabled_;
  VideoTrackSettingsMessage settings_;

};


// Generated class from Pigeon that represents data sent in messages.
class VideoTrackSettingsMessage {
 public:
  // Constructs an object setting all fields.
  explicit VideoTrackSettingsMessage(
    const std::string& device_id,
    const std::string& kind,
    int64_t width,
    int64_t height,
    int64_t frame_rate);

  const std::string& device_id() const;
  void set_device_id(std::string_view value_arg);

  const std::string& kind() const;
  void set_kind(std::string_view value_arg);

  int64_t width() const;
  void set_width(int64_t value_arg);

  int64_t height() const;
  void set_height(int64_t value_arg);

  int64_t frame_rate() const;
  void set_frame_rate(int64_t value_arg);


 private:
  static VideoTrackSettingsMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class VideoTrackMessage;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string device_id_;
  std::string kind_;
  int64_t width_;
  int64_t height_;
  int64_t frame_rate_;

};


// Generated class from Pigeon that represents data sent in messages.
class MediaDeviceInfoMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit MediaDeviceInfoMessage(
    const std::string& device_id,
    const std::string& label);

  // Constructs an object setting all fields.
  explicit MediaDeviceInfoMessage(
    const std::string& device_id,
    const std::string* group_id,
    const std::string* kind,
    const std::string& label);

  const std::string& device_id() const;
  void set_device_id(std::string_view value_arg);

  const std::string* group_id() const;
  void set_group_id(const std::string_view* value_arg);
  void set_group_id(std::string_view value_arg);

  const std::string* kind() const;
  void set_kind(const std::string_view* value_arg);
  void set_kind(std::string_view value_arg);

  const std::string& label() const;
  void set_label(std::string_view value_arg);


 private:
  static MediaDeviceInfoMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string device_id_;
  std::optional<std::string> group_id_;
  std::optional<std::string> kind_;
  std::string label_;

};


// Generated class from Pigeon that represents data sent in messages.
class IceCandidateMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  IceCandidateMessage();

  // Constructs an object setting all fields.
  explicit IceCandidateMessage(
    const std::string* candidate,
    const std::string* sdp_mid,
    const int64_t* sdp_m_line_index);

  const std::string* candidate() const;
  void set_candidate(const std::string_view* value_arg);
  void set_candidate(std::string_view value_arg);

  const std::string* sdp_mid() const;
  void set_sdp_mid(const std::string_view* value_arg);
  void set_sdp_mid(std::string_view value_arg);

  const int64_t* sdp_m_line_index() const;
  void set_sdp_m_line_index(const int64_t* value_arg);
  void set_sdp_m_line_index(int64_t value_arg);


 private:
  static IceCandidateMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<std::string> candidate_;
  std::optional<std::string> sdp_mid_;
  std::optional<int64_t> sdp_m_line_index_;

};


// Generated class from Pigeon that represents data sent in messages.
class StatsReportMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit StatsReportMessage(const flutter::EncodableMap& values);

  // Constructs an object setting all fields.
  explicit StatsReportMessage(
    const std::string* id,
    const std::string* type,
    const double* timestamp,
    const flutter::EncodableMap& values);

  const std::string* id() const;
  void set_id(const std::string_view* value_arg);
  void set_id(std::string_view value_arg);

  const std::string* type() const;
  void set_type(const std::string_view* value_arg);
  void set_type(std::string_view value_arg);

  const double* timestamp() const;
  void set_timestamp(const double* value_arg);
  void set_timestamp(double value_arg);

  const flutter::EncodableMap& values() const;
  void set_values(const flutter::EncodableMap& value_arg);


 private:
  static StatsReportMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<std::string> id_;
  std::optional<std::string> type_;
  std::optional<double> timestamp_;
  flutter::EncodableMap values_;

};


// Generated class from Pigeon that represents data sent in messages.
class DataChannelMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit DataChannelMessage(
    const std::string& channel_id,
    const std::string& type);

  // Constructs an object setting all fields.
  explicit DataChannelMessage(
    const std::string& channel_id,
    const std::string& type,
    const std::vector<uint8_t>* binary,
    const std::string* text);

  const std::string& channel_id() const;
  void set_channel_id(std::string_view value_arg);

  const std::string& type() const;
  void set_type(std::string_view value_arg);

  const std::vector<uint8_t>* binary() const;
  void set_binary(const std::vector<uint8_t>* value_arg);
  void set_binary(const std::vector<uint8_t>& value_arg);

  const std::string* text() const;
  void set_text(const std::string_view* value_arg);
  void set_text(std::string_view value_arg);


 private:
  static DataChannelMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string channel_id_;
  std::string type_;
  std::optional<std::vector<uint8_t>> binary_;
  std::optional<std::string> text_;

};


// Generated class from Pigeon that represents data sent in messages.
class DataChannelInitMessage {
 public:
  // Constructs an object setting all fields.
  explicit DataChannelInitMessage(
    int64_t id,
    bool negotiated,
    const std::string& binary_type,
    const std::string& protocol,
    bool ordered,
    int64_t max_retransmit_time,
    int64_t max_retransmits);

  int64_t id() const;
  void set_id(int64_t value_arg);

  bool negotiated() const;
  void set_negotiated(bool value_arg);

  const std::string& binary_type() const;
  void set_binary_type(std::string_view value_arg);

  const std::string& protocol() const;
  void set_protocol(std::string_view value_arg);

  bool ordered() const;
  void set_ordered(bool value_arg);

  int64_t max_retransmit_time() const;
  void set_max_retransmit_time(int64_t value_arg);

  int64_t max_retransmits() const;
  void set_max_retransmits(int64_t value_arg);


 private:
  static DataChannelInitMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  int64_t id_;
  bool negotiated_;
  std::string binary_type_;
  std::string protocol_;
  bool ordered_;
  int64_t max_retransmit_time_;
  int64_t max_retransmits_;

};


// Generated class from Pigeon that represents data sent in messages.
class HeaderExtensionMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  HeaderExtensionMessage();

  // Constructs an object setting all fields.
  explicit HeaderExtensionMessage(
    const std::string* uri,
    const int64_t* id,
    const bool* encrypted);

  const std::string* uri() const;
  void set_uri(const std::string_view* value_arg);
  void set_uri(std::string_view value_arg);

  const int64_t* id() const;
  void set_id(const int64_t* value_arg);
  void set_id(int64_t value_arg);

  const bool* encrypted() const;
  void set_encrypted(const bool* value_arg);
  void set_encrypted(bool value_arg);


 private:
  static HeaderExtensionMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<std::string> uri_;
  std::optional<int64_t> id_;
  std::optional<bool> encrypted_;

};


// Generated class from Pigeon that represents data sent in messages.
class RtpEncodingMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit RtpEncodingMessage(bool active);

  // Constructs an object setting all fields.
  explicit RtpEncodingMessage(
    bool active,
    const std::string* rid,
    const int64_t* max_bitrate,
    const int64_t* min_bitrate,
    const int64_t* max_framerate,
    const int64_t* num_temporal_layers,
    const double* scale_resolution_down_by,
    const int64_t* ssrc,
    const std::string* scalability_mode);

  bool active() const;
  void set_active(bool value_arg);

  const std::string* rid() const;
  void set_rid(const std::string_view* value_arg);
  void set_rid(std::string_view value_arg);

  const int64_t* max_bitrate() const;
  void set_max_bitrate(const int64_t* value_arg);
  void set_max_bitrate(int64_t value_arg);

  const int64_t* min_bitrate() const;
  void set_min_bitrate(const int64_t* value_arg);
  void set_min_bitrate(int64_t value_arg);

  const int64_t* max_framerate() const;
  void set_max_framerate(const int64_t* value_arg);
  void set_max_framerate(int64_t value_arg);

  const int64_t* num_temporal_layers() const;
  void set_num_temporal_layers(const int64_t* value_arg);
  void set_num_temporal_layers(int64_t value_arg);

  const double* scale_resolution_down_by() const;
  void set_scale_resolution_down_by(const double* value_arg);
  void set_scale_resolution_down_by(double value_arg);

  const int64_t* ssrc() const;
  void set_ssrc(const int64_t* value_arg);
  void set_ssrc(int64_t value_arg);

  const std::string* scalability_mode() const;
  void set_scalability_mode(const std::string_view* value_arg);
  void set_scalability_mode(std::string_view value_arg);


 private:
  static RtpEncodingMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  bool active_;
  std::optional<std::string> rid_;
  std::optional<int64_t> max_bitrate_;
  std::optional<int64_t> min_bitrate_;
  std::optional<int64_t> max_framerate_;
  std::optional<int64_t> num_temporal_layers_;
  std::optional<double> scale_resolution_down_by_;
  std::optional<int64_t> ssrc_;
  std::optional<std::string> scalability_mode_;

};


// Generated class from Pigeon that represents data sent in messages.
class RtpCodecMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  RtpCodecMessage();

  // Constructs an object setting all fields.
  explicit RtpCodecMessage(
    const int64_t* payload_type,
    const std::string* name,
    const std::string* kind,
    const int64_t* clock_rate,
    const int64_t* num_channels,
    const flutter::EncodableMap* parameters);

  const int64_t* payload_type() const;
  void set_payload_type(const int64_t* value_arg);
  void set_payload_type(int64_t value_arg);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);

  const std::string* kind() const;
  void set_kind(const std::string_view* value_arg);
  void set_kind(std::string_view value_arg);

  const int64_t* clock_rate() const;
  void set_clock_rate(const int64_t* value_arg);
  void set_clock_rate(int64_t value_arg);

  const int64_t* num_channels() const;
  void set_num_channels(const int64_t* value_arg);
  void set_num_channels(int64_t value_arg);

  const flutter::EncodableMap* parameters() const;
  void set_parameters(const flutter::EncodableMap* value_arg);
  void set_parameters(const flutter::EncodableMap& value_arg);


 private:
  static RtpCodecMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<int64_t> payload_type_;
  std::optional<std::string> name_;
  std::optional<std::string> kind_;
  std::optional<int64_t> clock_rate_;
  std::optional<int64_t> num_channels_;
  std::optional<flutter::EncodableMap> parameters_;

};


// Generated class from Pigeon that represents data sent in messages.
class RtpParametersMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  RtpParametersMessage();

  // Constructs an object setting all fields.
  explicit RtpParametersMessage(
    const std::string* transaction_id,
    const RTCParametersMessage* rtcp,
    const flutter::EncodableList* header_extensions,
    const flutter::EncodableList* encodings,
    const flutter::EncodableList* codecs);

  const std::string* transaction_id() const;
  void set_transaction_id(const std::string_view* value_arg);
  void set_transaction_id(std::string_view value_arg);

  const RTCParametersMessage* rtcp() const;
  void set_rtcp(const RTCParametersMessage* value_arg);
  void set_rtcp(const RTCParametersMessage& value_arg);

  const flutter::EncodableList* header_extensions() const;
  void set_header_extensions(const flutter::EncodableList* value_arg);
  void set_header_extensions(const flutter::EncodableList& value_arg);

  const flutter::EncodableList* encodings() const;
  void set_encodings(const flutter::EncodableList* value_arg);
  void set_encodings(const flutter::EncodableList& value_arg);

  const flutter::EncodableList* codecs() const;
  void set_codecs(const flutter::EncodableList* value_arg);
  void set_codecs(const flutter::EncodableList& value_arg);


 private:
  static RtpParametersMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<std::string> transaction_id_;
  std::optional<RTCParametersMessage> rtcp_;
  std::optional<flutter::EncodableList> header_extensions_;
  std::optional<flutter::EncodableList> encodings_;
  std::optional<flutter::EncodableList> codecs_;

};


// Generated class from Pigeon that represents data sent in messages.
class RTCParametersMessage {
 public:
  // Constructs an object setting all fields.
  explicit RTCParametersMessage(
    const std::string& cname,
    bool reduced_size);

  const std::string& cname() const;
  void set_cname(std::string_view value_arg);

  bool reduced_size() const;
  void set_reduced_size(bool value_arg);


 private:
  static RTCParametersMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RtpParametersMessage;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string cname_;
  bool reduced_size_;

};


// Generated class from Pigeon that represents data sent in messages.
class RtpCodecCapabilityMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit RtpCodecCapabilityMessage(
    int64_t clock_rate,
    const std::string& mime_type);

  // Constructs an object setting all fields.
  explicit RtpCodecCapabilityMessage(
    const int64_t* channels,
    int64_t clock_rate,
    const std::string& mime_type,
    const std::string* sdp_fmtp_line);

  const int64_t* channels() const;
  void set_channels(const int64_t* value_arg);
  void set_channels(int64_t value_arg);

  int64_t clock_rate() const;
  void set_clock_rate(int64_t value_arg);

  const std::string& mime_type() const;
  void set_mime_type(std::string_view value_arg);

  const std::string* sdp_fmtp_line() const;
  void set_sdp_fmtp_line(const std::string_view* value_arg);
  void set_sdp_fmtp_line(std::string_view value_arg);


 private:
  static RtpCodecCapabilityMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<int64_t> channels_;
  int64_t clock_rate_;
  std::string mime_type_;
  std::optional<std::string> sdp_fmtp_line_;

};


// Generated class from Pigeon that represents data sent in messages.
class RtpHeaderExtensionCapabilityMessage {
 public:
  // Constructs an object setting all fields.
  explicit RtpHeaderExtensionCapabilityMessage(const std::string& uri);

  const std::string& uri() const;
  void set_uri(std::string_view value_arg);


 private:
  static RtpHeaderExtensionCapabilityMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string uri_;

};


// Generated class from Pigeon that represents data sent in messages.
class RtpCapabilitiesMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  RtpCapabilitiesMessage();

  // Constructs an object setting all fields.
  explicit RtpCapabilitiesMessage(
    const flutter::EncodableList* codecs,
    const flutter::EncodableList* header_extensions,
    const flutter::EncodableList* fec_mechanisms);

  const flutter::EncodableList* codecs() const;
  void set_codecs(const flutter::EncodableList* value_arg);
  void set_codecs(const flutter::EncodableList& value_arg);

  const flutter::EncodableList* header_extensions() const;
  void set_header_extensions(const flutter::EncodableList* value_arg);
  void set_header_extensions(const flutter::EncodableList& value_arg);

  const flutter::EncodableList* fec_mechanisms() const;
  void set_fec_mechanisms(const flutter::EncodableList* value_arg);
  void set_fec_mechanisms(const flutter::EncodableList& value_arg);


 private:
  static RtpCapabilitiesMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::optional<flutter::EncodableList> codecs_;
  std::optional<flutter::EncodableList> header_extensions_;
  std::optional<flutter::EncodableList> fec_mechanisms_;

};


// Generated class from Pigeon that represents data sent in messages.
class ThumbnailSizeMessage {
 public:
  // Constructs an object setting all fields.
  explicit ThumbnailSizeMessage(
    int64_t width,
    int64_t height);

  int64_t width() const;
  void set_width(int64_t value_arg);

  int64_t height() const;
  void set_height(int64_t value_arg);


 private:
  static ThumbnailSizeMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class DesktopCapturerSourceMessage;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  int64_t width_;
  int64_t height_;

};


// Generated class from Pigeon that represents data sent in messages.
class DesktopCapturerSourceMessage {
 public:
  // Constructs an object setting all fields.
  explicit DesktopCapturerSourceMessage(
    const std::string& id,
    const std::string& name,
    const std::string& type,
    const ThumbnailSizeMessage& thumbnail_size_message);

  const std::string& id() const;
  void set_id(std::string_view value_arg);

  const std::string& name() const;
  void set_name(std::string_view value_arg);

  const std::string& type() const;
  void set_type(std::string_view value_arg);

  const ThumbnailSizeMessage& thumbnail_size_message() const;
  void set_thumbnail_size_message(const ThumbnailSizeMessage& value_arg);


 private:
  static DesktopCapturerSourceMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class RTCPeerconnectionFactoryApi;
  friend class RTCPeerconnectionFactoryApiCodecSerializer;
  friend class RtcPeerconnectionApi;
  friend class RtcPeerconnectionApiCodecSerializer;
  friend class RTCDataChannelApi;
  friend class RTCDataChannelApiCodecSerializer;
  friend class RTCDTMFSenderApi;
  friend class RTCDTMFSenderApiCodecSerializer;
  friend class RTCRtpSenderApi;
  friend class RTCRtpSenderApiCodecSerializer;
  friend class RTCRtpTransceiverApi;
  friend class RTCRtpTransceiverApiCodecSerializer;
  friend class RTCVideoRendererApi;
  friend class RTCVideoRendererApiCodecSerializer;
  friend class MediaRecorderApi;
  friend class MediaRecorderApiCodecSerializer;
  friend class MediaStreamApi;
  friend class MediaStreamApiCodecSerializer;
  friend class MediaStreamTrackApi;
  friend class MediaStreamTrackApiCodecSerializer;
  friend class DesktopCapturerSourceApi;
  friend class DesktopCapturerSourceApiCodecSerializer;
  friend class MediaDevices;
  friend class MediaDevicesCodecSerializer;
  std::string id_;
  std::string name_;
  std::string type_;
  ThumbnailSizeMessage thumbnail_size_message_;

};

class RTCPeerconnectionFactoryApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  RTCPeerconnectionFactoryApiCodecSerializer();
  inline static RTCPeerconnectionFactoryApiCodecSerializer& GetInstance() {
    static RTCPeerconnectionFactoryApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RTCPeerconnectionFactoryApi {
 public:
  RTCPeerconnectionFactoryApi(const RTCPeerconnectionFactoryApi&) = delete;
  RTCPeerconnectionFactoryApi& operator=(const RTCPeerconnectionFactoryApi&) = delete;
  virtual ~RTCPeerconnectionFactoryApi() {}
  virtual ErrorOr<std::string> CreatePeerconnection(
    const flutter::EncodableMap& configuration,
    const flutter::EncodableMap& constraints) = 0;
  virtual ErrorOr<RtpCapabilitiesMessage> GetRtpReceiverCapabilities(const std::string& kind) = 0;
  virtual ErrorOr<RtpCapabilitiesMessage> GetRtpSenderCapabilities(const std::string& kind) = 0;

  // The codec used by RTCPeerconnectionFactoryApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RTCPeerconnectionFactoryApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RTCPeerconnectionFactoryApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RTCPeerconnectionFactoryApi() = default;

};
class RtcPeerconnectionApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  RtcPeerconnectionApiCodecSerializer();
  inline static RtcPeerconnectionApiCodecSerializer& GetInstance() {
    static RtcPeerconnectionApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RtcPeerconnectionApi {
 public:
  RtcPeerconnectionApi(const RtcPeerconnectionApi&) = delete;
  RtcPeerconnectionApi& operator=(const RtcPeerconnectionApi&) = delete;
  virtual ~RtcPeerconnectionApi() {}
  virtual std::optional<FlutterError> AddCandidate(
    const std::string& peerconnection_id,
    const IceCandidateMessage& msg) = 0;
  virtual std::optional<FlutterError> AddStream(
    const std::string& peerconnection_id,
    const std::string& stream_id) = 0;
  virtual ErrorOr<flutter::EncodableMap> AddTrack(
    const std::string& peerconnection_id,
    const std::string& track_id,
    const flutter::EncodableList* stream_ids) = 0;
  virtual std::optional<FlutterError> Close(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<SessionDescriptionMessage> CreateAnswer(
    const std::string& peerconnection_id,
    const ConstraintsMessage& msg) = 0;
  virtual ErrorOr<flutter::EncodableMap> CreateDataChannel(
    const std::string& peerconnection_id,
    const std::string& label,
    const DataChannelInitMessage& msg) = 0;
  virtual ErrorOr<SessionDescriptionMessage> CreateOffer(
    const std::string& peerconnection_id,
    const ConstraintsMessage& msg) = 0;
  virtual std::optional<FlutterError> Dispose(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<std::optional<SessionDescriptionMessage>> GetLocalDescription(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<flutter::EncodableList> GetLocalStreams(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<flutter::EncodableList> GetRemoteStreams(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<flutter::EncodableList> GetReceivers(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<flutter::EncodableList> GetSenders(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<flutter::EncodableList> GetTransceivers(const std::string& peerconnection_id) = 0;
  virtual ErrorOr<flutter::EncodableList> GetStats(
    const std::string& peerconnection_id,
    const std::string& track_id) = 0;
  virtual std::optional<FlutterError> RemoveStream(
    const std::string& peerconnection_id,
    const std::string& stream_id) = 0;
  virtual ErrorOr<bool> RemoveTrack(
    const std::string& peerconnection_id,
    const std::string& sender_id) = 0;
  virtual std::optional<FlutterError> RestartIce(const std::string& peerconnection_id) = 0;
  virtual std::optional<FlutterError> SetConfiguration(
    const std::string& peerconnection_id,
    const ConfigurationMessage& msg) = 0;
  virtual std::optional<FlutterError> SetLocalDescription(
    const std::string& peerconnection_id,
    const SessionDescriptionMessage& msg) = 0;
  virtual ErrorOr<SessionDescriptionMessage> GetRemoteDescription(const std::string& peerconnection_id) = 0;
  virtual std::optional<FlutterError> SetRemoteDescription(
    const std::string& peerconnection_id,
    const SessionDescriptionMessage& msg) = 0;

  // The codec used by RtcPeerconnectionApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RtcPeerconnectionApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RtcPeerconnectionApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RtcPeerconnectionApi() = default;

};
class RTCDataChannelApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  RTCDataChannelApiCodecSerializer();
  inline static RTCDataChannelApiCodecSerializer& GetInstance() {
    static RTCDataChannelApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RTCDataChannelApi {
 public:
  RTCDataChannelApi(const RTCDataChannelApi&) = delete;
  RTCDataChannelApi& operator=(const RTCDataChannelApi&) = delete;
  virtual ~RTCDataChannelApi() {}
  virtual std::optional<FlutterError> Send(
    const std::string& peerconnection_id,
    const DataChannelMessage& message) = 0;
  virtual std::optional<FlutterError> Close(const std::string& peerconnection_id) = 0;

  // The codec used by RTCDataChannelApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RTCDataChannelApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RTCDataChannelApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RTCDataChannelApi() = default;

};
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RTCDTMFSenderApi {
 public:
  RTCDTMFSenderApi(const RTCDTMFSenderApi&) = delete;
  RTCDTMFSenderApi& operator=(const RTCDTMFSenderApi&) = delete;
  virtual ~RTCDTMFSenderApi() {}
  virtual std::optional<FlutterError> InsertDtmf(
    const std::string& peerconnection_id,
    const std::string& rtp_sender_id,
    const std::string& tones,
    int64_t duration,
    int64_t inter_tone_gap) = 0;
  virtual ErrorOr<bool> CanInsertDtmf(
    const std::string& peerconnection_id,
    const std::string& rtp_sender_id) = 0;

  // The codec used by RTCDTMFSenderApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RTCDTMFSenderApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RTCDTMFSenderApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RTCDTMFSenderApi() = default;

};
class RTCRtpSenderApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  RTCRtpSenderApiCodecSerializer();
  inline static RTCRtpSenderApiCodecSerializer& GetInstance() {
    static RTCRtpSenderApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RTCRtpSenderApi {
 public:
  RTCRtpSenderApi(const RTCRtpSenderApi&) = delete;
  RTCRtpSenderApi& operator=(const RTCRtpSenderApi&) = delete;
  virtual ~RTCRtpSenderApi() {}
  virtual ErrorOr<bool> SetParameters(
    const std::string& peerconnection_id,
    const std::string& rtp_sender_id,
    const RtpParametersMessage& parameters) = 0;
  virtual std::optional<FlutterError> ReplaceTrack(
    const std::string& peerconnection_id,
    const std::string& rtp_sender_id,
    const std::string& track_id) = 0;
  virtual std::optional<FlutterError> SetTrack(
    const std::string& peerconnection_id,
    const std::string& rtp_sender_id,
    const std::string& track_id,
    bool take_ownership) = 0;

  // The codec used by RTCRtpSenderApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RTCRtpSenderApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RTCRtpSenderApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RTCRtpSenderApi() = default;

};
class RTCRtpTransceiverApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  RTCRtpTransceiverApiCodecSerializer();
  inline static RTCRtpTransceiverApiCodecSerializer& GetInstance() {
    static RTCRtpTransceiverApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RTCRtpTransceiverApi {
 public:
  RTCRtpTransceiverApi(const RTCRtpTransceiverApi&) = delete;
  RTCRtpTransceiverApi& operator=(const RTCRtpTransceiverApi&) = delete;
  virtual ~RTCRtpTransceiverApi() {}
  virtual std::optional<FlutterError> SetDirection(
    const std::string& peerconnection_id,
    const std::string& transceiver_id,
    const std::string& direction) = 0;
  virtual ErrorOr<std::optional<std::string>> GetCurrentDirection(
    const std::string& peerconnection_id,
    const std::string& transceiver_id) = 0;
  virtual ErrorOr<std::string> GetDirection(
    const std::string& peerconnection_id,
    const std::string& transceiver_id) = 0;
  virtual std::optional<FlutterError> Stop(
    const std::string& peerconnection_id,
    const std::string& transceiver_id) = 0;
  virtual std::optional<FlutterError> SetCodecPreferences(
    const std::string& peerconnection_id,
    const std::string& transceiver_id,
    const flutter::EncodableList& codecs) = 0;

  // The codec used by RTCRtpTransceiverApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RTCRtpTransceiverApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RTCRtpTransceiverApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RTCRtpTransceiverApi() = default;

};
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RTCVideoRendererApi {
 public:
  RTCVideoRendererApi(const RTCVideoRendererApi&) = delete;
  RTCVideoRendererApi& operator=(const RTCVideoRendererApi&) = delete;
  virtual ~RTCVideoRendererApi() {}
  virtual ErrorOr<std::optional<int64_t>> Initialize() = 0;
  virtual std::optional<FlutterError> SetSrcObject(
    int64_t texture_id,
    const std::string& stream_id,
    const std::string& owner_tag,
    const std::string* track_id) = 0;
  virtual std::optional<FlutterError> Dispose(int64_t texture_id) = 0;

  // The codec used by RTCVideoRendererApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RTCVideoRendererApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RTCVideoRendererApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RTCVideoRendererApi() = default;

};
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class MediaRecorderApi {
 public:
  MediaRecorderApi(const MediaRecorderApi&) = delete;
  MediaRecorderApi& operator=(const MediaRecorderApi&) = delete;
  virtual ~MediaRecorderApi() {}
  virtual std::optional<FlutterError> Start(
    const std::string& path,
    int64_t audio_channel,
    const std::string* video_track_id,
    int64_t recorder_id,
    const std::string* peerconnection_id) = 0;
  virtual std::optional<FlutterError> Stop(int64_t recorder_id) = 0;

  // The codec used by MediaRecorderApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `MediaRecorderApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    MediaRecorderApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  MediaRecorderApi() = default;

};
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class MediaStreamApi {
 public:
  MediaStreamApi(const MediaStreamApi&) = delete;
  MediaStreamApi& operator=(const MediaStreamApi&) = delete;
  virtual ~MediaStreamApi() {}
  virtual std::optional<FlutterError> GetMediaTracks(const std::string& stream_id) = 0;
  virtual std::optional<FlutterError> AddTrack(
    const std::string& stream_id,
    const std::string& track_id) = 0;
  virtual std::optional<FlutterError> RemoveTrack(
    const std::string& stream_id,
    const std::string& track_id) = 0;
  virtual std::optional<FlutterError> Dispose(const std::string& stream_id) = 0;

  // The codec used by MediaStreamApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `MediaStreamApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    MediaStreamApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  MediaStreamApi() = default;

};
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class MediaStreamTrackApi {
 public:
  MediaStreamTrackApi(const MediaStreamTrackApi&) = delete;
  MediaStreamTrackApi& operator=(const MediaStreamTrackApi&) = delete;
  virtual ~MediaStreamTrackApi() {}
  virtual std::optional<FlutterError> Enable(
    const std::string& track_id,
    bool enabled,
    const std::string& peerconnection_id) = 0;
  virtual ErrorOr<bool> HasTorch(const std::string& track_id) = 0;
  virtual std::optional<FlutterError> SetTorch(
    const std::string& track_id,
    bool torch) = 0;
  virtual std::optional<FlutterError> CaptureFrame(
    const std::string& track_id,
    const std::string& peerconnection_id,
    const std::string& path) = 0;
  virtual std::optional<FlutterError> Stop(const std::string& track_id) = 0;

  // The codec used by MediaStreamTrackApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `MediaStreamTrackApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    MediaStreamTrackApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  MediaStreamTrackApi() = default;

};
class DesktopCapturerSourceApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  DesktopCapturerSourceApiCodecSerializer();
  inline static DesktopCapturerSourceApiCodecSerializer& GetInstance() {
    static DesktopCapturerSourceApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class DesktopCapturerSourceApi {
 public:
  DesktopCapturerSourceApi(const DesktopCapturerSourceApi&) = delete;
  DesktopCapturerSourceApi& operator=(const DesktopCapturerSourceApi&) = delete;
  virtual ~DesktopCapturerSourceApi() {}
  virtual ErrorOr<flutter::EncodableList> GetDesktopSources(
    const flutter::EncodableList& types,
    const ThumbnailSizeMessage& thumbnail_size) = 0;
  virtual ErrorOr<bool> UpdateSources(const flutter::EncodableList& types) = 0;
  virtual ErrorOr<std::optional<std::vector<uint8_t>>> GetThumbnail(
    const std::string& source_id,
    const ThumbnailSizeMessage& thumbnail_size) = 0;

  // The codec used by DesktopCapturerSourceApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `DesktopCapturerSourceApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    DesktopCapturerSourceApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  DesktopCapturerSourceApi() = default;

};
class MediaDevicesCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  MediaDevicesCodecSerializer();
  inline static MediaDevicesCodecSerializer& GetInstance() {
    static MediaDevicesCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class MediaDevices {
 public:
  MediaDevices(const MediaDevices&) = delete;
  MediaDevices& operator=(const MediaDevices&) = delete;
  virtual ~MediaDevices() {}
  virtual ErrorOr<MediaStreamMessage> GetUserMedia(const flutter::EncodableMap& media_constraints) = 0;
  virtual ErrorOr<MediaStreamMessage> GetDisplayMedia(const flutter::EncodableMap& media_constraints) = 0;
  virtual ErrorOr<flutter::EncodableList> GetSources() = 0;
  virtual ErrorOr<flutter::EncodableList> EnumerateDevices() = 0;
  virtual ErrorOr<MediaDeviceInfoMessage> SelectAudioOutput(const std::string& device_id) = 0;

  // The codec used by MediaDevices.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `MediaDevices` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    MediaDevices* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  MediaDevices() = default;

};
}  // namespace flutter_webrtc_plugin
#endif  // PIGEON_MESSAGES_H_
