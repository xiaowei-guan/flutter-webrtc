// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.cloudwebrtc.webrtc;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SessionDescriptionMessage {
    private @Nullable String sdp;

    public @Nullable String getSdp() {
      return sdp;
    }

    public void setSdp(@Nullable String setterArg) {
      this.sdp = setterArg;
    }

    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    public static final class Builder {

      private @Nullable String sdp;

      public @NonNull Builder setSdp(@Nullable String setterArg) {
        this.sdp = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull SessionDescriptionMessage build() {
        SessionDescriptionMessage pigeonReturn = new SessionDescriptionMessage();
        pigeonReturn.setSdp(sdp);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(sdp);
      toListResult.add(type);
      return toListResult;
    }

    static @NonNull SessionDescriptionMessage fromList(@NonNull ArrayList<Object> list) {
      SessionDescriptionMessage pigeonResult = new SessionDescriptionMessage();
      Object sdp = list.get(0);
      pigeonResult.setSdp((String) sdp);
      Object type = list.get(1);
      pigeonResult.setType((String) type);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConstraintsMessage {
    private @NonNull Map<String, dynamic> constraints;

    public @NonNull Map<String, dynamic> getConstraints() {
      return constraints;
    }

    public void setConstraints(@NonNull Map<String, dynamic> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"constraints\" is null.");
      }
      this.constraints = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ConstraintsMessage() {}

    public static final class Builder {

      private @Nullable Map<String, dynamic> constraints;

      public @NonNull Builder setConstraints(@NonNull Map<String, dynamic> setterArg) {
        this.constraints = setterArg;
        return this;
      }

      public @NonNull ConstraintsMessage build() {
        ConstraintsMessage pigeonReturn = new ConstraintsMessage();
        pigeonReturn.setConstraints(constraints);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(constraints);
      return toListResult;
    }

    static @NonNull ConstraintsMessage fromList(@NonNull ArrayList<Object> list) {
      ConstraintsMessage pigeonResult = new ConstraintsMessage();
      Object constraints = list.get(0);
      pigeonResult.setConstraints((Map<String, dynamic>) constraints);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConfigurationMessage {
    private @NonNull Map<String, dynamic> configurations;

    public @NonNull Map<String, dynamic> getConfigurations() {
      return configurations;
    }

    public void setConfigurations(@NonNull Map<String, dynamic> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"configurations\" is null.");
      }
      this.configurations = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ConfigurationMessage() {}

    public static final class Builder {

      private @Nullable Map<String, dynamic> configurations;

      public @NonNull Builder setConfigurations(@NonNull Map<String, dynamic> setterArg) {
        this.configurations = setterArg;
        return this;
      }

      public @NonNull ConfigurationMessage build() {
        ConfigurationMessage pigeonReturn = new ConfigurationMessage();
        pigeonReturn.setConfigurations(configurations);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(configurations);
      return toListResult;
    }

    static @NonNull ConfigurationMessage fromList(@NonNull ArrayList<Object> list) {
      ConfigurationMessage pigeonResult = new ConfigurationMessage();
      Object configurations = list.get(0);
      pigeonResult.setConfigurations((Map<String, dynamic>) configurations);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaStreamMessage {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String ownerTag;

    public @NonNull String getOwnerTag() {
      return ownerTag;
    }

    public void setOwnerTag(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ownerTag\" is null.");
      }
      this.ownerTag = setterArg;
    }

    private @NonNull List<AudioTrackMessage> audioTracks;

    public @NonNull List<AudioTrackMessage> getAudioTracks() {
      return audioTracks;
    }

    public void setAudioTracks(@NonNull List<AudioTrackMessage> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"audioTracks\" is null.");
      }
      this.audioTracks = setterArg;
    }

    private @NonNull List<VideoTrackMessage> videoTracks;

    public @NonNull List<VideoTrackMessage> getVideoTracks() {
      return videoTracks;
    }

    public void setVideoTracks(@NonNull List<VideoTrackMessage> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"videoTracks\" is null.");
      }
      this.videoTracks = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MediaStreamMessage() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String ownerTag;

      public @NonNull Builder setOwnerTag(@NonNull String setterArg) {
        this.ownerTag = setterArg;
        return this;
      }

      private @Nullable List<AudioTrackMessage> audioTracks;

      public @NonNull Builder setAudioTracks(@NonNull List<AudioTrackMessage> setterArg) {
        this.audioTracks = setterArg;
        return this;
      }

      private @Nullable List<VideoTrackMessage> videoTracks;

      public @NonNull Builder setVideoTracks(@NonNull List<VideoTrackMessage> setterArg) {
        this.videoTracks = setterArg;
        return this;
      }

      public @NonNull MediaStreamMessage build() {
        MediaStreamMessage pigeonReturn = new MediaStreamMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setOwnerTag(ownerTag);
        pigeonReturn.setAudioTracks(audioTracks);
        pigeonReturn.setVideoTracks(videoTracks);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(id);
      toListResult.add(ownerTag);
      toListResult.add(audioTracks);
      toListResult.add(videoTracks);
      return toListResult;
    }

    static @NonNull MediaStreamMessage fromList(@NonNull ArrayList<Object> list) {
      MediaStreamMessage pigeonResult = new MediaStreamMessage();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object ownerTag = list.get(1);
      pigeonResult.setOwnerTag((String) ownerTag);
      Object audioTracks = list.get(2);
      pigeonResult.setAudioTracks((List<AudioTrackMessage>) audioTracks);
      Object videoTracks = list.get(3);
      pigeonResult.setVideoTracks((List<VideoTrackMessage>) videoTracks);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AudioTrackMessage {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String label;

    public @NonNull String getLabel() {
      return label;
    }

    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    private @NonNull String kind;

    public @NonNull String getKind() {
      return kind;
    }

    public void setKind(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"kind\" is null.");
      }
      this.kind = setterArg;
    }

    private @NonNull Boolean enabled;

    public @NonNull Boolean getEnabled() {
      return enabled;
    }

    public void setEnabled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enabled\" is null.");
      }
      this.enabled = setterArg;
    }

    private @NonNull AudioTrackSettingsMessage settings;

    public @NonNull AudioTrackSettingsMessage getSettings() {
      return settings;
    }

    public void setSettings(@NonNull AudioTrackSettingsMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"settings\" is null.");
      }
      this.settings = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AudioTrackMessage() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String label;

      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }

      private @Nullable String kind;

      public @NonNull Builder setKind(@NonNull String setterArg) {
        this.kind = setterArg;
        return this;
      }

      private @Nullable Boolean enabled;

      public @NonNull Builder setEnabled(@NonNull Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }

      private @Nullable AudioTrackSettingsMessage settings;

      public @NonNull Builder setSettings(@NonNull AudioTrackSettingsMessage setterArg) {
        this.settings = setterArg;
        return this;
      }

      public @NonNull AudioTrackMessage build() {
        AudioTrackMessage pigeonReturn = new AudioTrackMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setLabel(label);
        pigeonReturn.setKind(kind);
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setSettings(settings);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(id);
      toListResult.add(label);
      toListResult.add(kind);
      toListResult.add(enabled);
      toListResult.add((settings == null) ? null : settings.toList());
      return toListResult;
    }

    static @NonNull AudioTrackMessage fromList(@NonNull ArrayList<Object> list) {
      AudioTrackMessage pigeonResult = new AudioTrackMessage();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object label = list.get(1);
      pigeonResult.setLabel((String) label);
      Object kind = list.get(2);
      pigeonResult.setKind((String) kind);
      Object enabled = list.get(3);
      pigeonResult.setEnabled((Boolean) enabled);
      Object settings = list.get(4);
      pigeonResult.setSettings((settings == null) ? null : AudioTrackSettingsMessage.fromList((ArrayList<Object>) settings));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AudioTrackSettingsMessage {
    private @NonNull String deviceId;

    public @NonNull String getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceId\" is null.");
      }
      this.deviceId = setterArg;
    }

    private @NonNull String kind;

    public @NonNull String getKind() {
      return kind;
    }

    public void setKind(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"kind\" is null.");
      }
      this.kind = setterArg;
    }

    private @NonNull Boolean autoGainControl;

    public @NonNull Boolean getAutoGainControl() {
      return autoGainControl;
    }

    public void setAutoGainControl(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"autoGainControl\" is null.");
      }
      this.autoGainControl = setterArg;
    }

    private @NonNull Boolean echoCancellation;

    public @NonNull Boolean getEchoCancellation() {
      return echoCancellation;
    }

    public void setEchoCancellation(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"echoCancellation\" is null.");
      }
      this.echoCancellation = setterArg;
    }

    private @NonNull Boolean noiseSuppression;

    public @NonNull Boolean getNoiseSuppression() {
      return noiseSuppression;
    }

    public void setNoiseSuppression(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"noiseSuppression\" is null.");
      }
      this.noiseSuppression = setterArg;
    }

    private @NonNull Long channelCount;

    public @NonNull Long getChannelCount() {
      return channelCount;
    }

    public void setChannelCount(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"channelCount\" is null.");
      }
      this.channelCount = setterArg;
    }

    private @NonNull Long latency;

    public @NonNull Long getLatency() {
      return latency;
    }

    public void setLatency(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latency\" is null.");
      }
      this.latency = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AudioTrackSettingsMessage() {}

    public static final class Builder {

      private @Nullable String deviceId;

      public @NonNull Builder setDeviceId(@NonNull String setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable String kind;

      public @NonNull Builder setKind(@NonNull String setterArg) {
        this.kind = setterArg;
        return this;
      }

      private @Nullable Boolean autoGainControl;

      public @NonNull Builder setAutoGainControl(@NonNull Boolean setterArg) {
        this.autoGainControl = setterArg;
        return this;
      }

      private @Nullable Boolean echoCancellation;

      public @NonNull Builder setEchoCancellation(@NonNull Boolean setterArg) {
        this.echoCancellation = setterArg;
        return this;
      }

      private @Nullable Boolean noiseSuppression;

      public @NonNull Builder setNoiseSuppression(@NonNull Boolean setterArg) {
        this.noiseSuppression = setterArg;
        return this;
      }

      private @Nullable Long channelCount;

      public @NonNull Builder setChannelCount(@NonNull Long setterArg) {
        this.channelCount = setterArg;
        return this;
      }

      private @Nullable Long latency;

      public @NonNull Builder setLatency(@NonNull Long setterArg) {
        this.latency = setterArg;
        return this;
      }

      public @NonNull AudioTrackSettingsMessage build() {
        AudioTrackSettingsMessage pigeonReturn = new AudioTrackSettingsMessage();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setKind(kind);
        pigeonReturn.setAutoGainControl(autoGainControl);
        pigeonReturn.setEchoCancellation(echoCancellation);
        pigeonReturn.setNoiseSuppression(noiseSuppression);
        pigeonReturn.setChannelCount(channelCount);
        pigeonReturn.setLatency(latency);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(deviceId);
      toListResult.add(kind);
      toListResult.add(autoGainControl);
      toListResult.add(echoCancellation);
      toListResult.add(noiseSuppression);
      toListResult.add(channelCount);
      toListResult.add(latency);
      return toListResult;
    }

    static @NonNull AudioTrackSettingsMessage fromList(@NonNull ArrayList<Object> list) {
      AudioTrackSettingsMessage pigeonResult = new AudioTrackSettingsMessage();
      Object deviceId = list.get(0);
      pigeonResult.setDeviceId((String) deviceId);
      Object kind = list.get(1);
      pigeonResult.setKind((String) kind);
      Object autoGainControl = list.get(2);
      pigeonResult.setAutoGainControl((Boolean) autoGainControl);
      Object echoCancellation = list.get(3);
      pigeonResult.setEchoCancellation((Boolean) echoCancellation);
      Object noiseSuppression = list.get(4);
      pigeonResult.setNoiseSuppression((Boolean) noiseSuppression);
      Object channelCount = list.get(5);
      pigeonResult.setChannelCount((channelCount == null) ? null : ((channelCount instanceof Integer) ? (Integer) channelCount : (Long) channelCount));
      Object latency = list.get(6);
      pigeonResult.setLatency((latency == null) ? null : ((latency instanceof Integer) ? (Integer) latency : (Long) latency));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoTrackMessage {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String label;

    public @NonNull String getLabel() {
      return label;
    }

    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    private @NonNull String kind;

    public @NonNull String getKind() {
      return kind;
    }

    public void setKind(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"kind\" is null.");
      }
      this.kind = setterArg;
    }

    private @NonNull Boolean enabled;

    public @NonNull Boolean getEnabled() {
      return enabled;
    }

    public void setEnabled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enabled\" is null.");
      }
      this.enabled = setterArg;
    }

    private @NonNull VideoTrackSettingsMessage settings;

    public @NonNull VideoTrackSettingsMessage getSettings() {
      return settings;
    }

    public void setSettings(@NonNull VideoTrackSettingsMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"settings\" is null.");
      }
      this.settings = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    VideoTrackMessage() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String label;

      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }

      private @Nullable String kind;

      public @NonNull Builder setKind(@NonNull String setterArg) {
        this.kind = setterArg;
        return this;
      }

      private @Nullable Boolean enabled;

      public @NonNull Builder setEnabled(@NonNull Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }

      private @Nullable VideoTrackSettingsMessage settings;

      public @NonNull Builder setSettings(@NonNull VideoTrackSettingsMessage setterArg) {
        this.settings = setterArg;
        return this;
      }

      public @NonNull VideoTrackMessage build() {
        VideoTrackMessage pigeonReturn = new VideoTrackMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setLabel(label);
        pigeonReturn.setKind(kind);
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setSettings(settings);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(id);
      toListResult.add(label);
      toListResult.add(kind);
      toListResult.add(enabled);
      toListResult.add((settings == null) ? null : settings.toList());
      return toListResult;
    }

    static @NonNull VideoTrackMessage fromList(@NonNull ArrayList<Object> list) {
      VideoTrackMessage pigeonResult = new VideoTrackMessage();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object label = list.get(1);
      pigeonResult.setLabel((String) label);
      Object kind = list.get(2);
      pigeonResult.setKind((String) kind);
      Object enabled = list.get(3);
      pigeonResult.setEnabled((Boolean) enabled);
      Object settings = list.get(4);
      pigeonResult.setSettings((settings == null) ? null : VideoTrackSettingsMessage.fromList((ArrayList<Object>) settings));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoTrackSettingsMessage {
    private @NonNull String deviceId;

    public @NonNull String getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceId\" is null.");
      }
      this.deviceId = setterArg;
    }

    private @NonNull String kind;

    public @NonNull String getKind() {
      return kind;
    }

    public void setKind(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"kind\" is null.");
      }
      this.kind = setterArg;
    }

    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    private @NonNull Long frameRate;

    public @NonNull Long getFrameRate() {
      return frameRate;
    }

    public void setFrameRate(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"frameRate\" is null.");
      }
      this.frameRate = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    VideoTrackSettingsMessage() {}

    public static final class Builder {

      private @Nullable String deviceId;

      public @NonNull Builder setDeviceId(@NonNull String setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable String kind;

      public @NonNull Builder setKind(@NonNull String setterArg) {
        this.kind = setterArg;
        return this;
      }

      private @Nullable Long width;

      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable Long frameRate;

      public @NonNull Builder setFrameRate(@NonNull Long setterArg) {
        this.frameRate = setterArg;
        return this;
      }

      public @NonNull VideoTrackSettingsMessage build() {
        VideoTrackSettingsMessage pigeonReturn = new VideoTrackSettingsMessage();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setKind(kind);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setFrameRate(frameRate);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(deviceId);
      toListResult.add(kind);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(frameRate);
      return toListResult;
    }

    static @NonNull VideoTrackSettingsMessage fromList(@NonNull ArrayList<Object> list) {
      VideoTrackSettingsMessage pigeonResult = new VideoTrackSettingsMessage();
      Object deviceId = list.get(0);
      pigeonResult.setDeviceId((String) deviceId);
      Object kind = list.get(1);
      pigeonResult.setKind((String) kind);
      Object width = list.get(2);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(3);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      Object frameRate = list.get(4);
      pigeonResult.setFrameRate((frameRate == null) ? null : ((frameRate instanceof Integer) ? (Integer) frameRate : (Long) frameRate));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaDeviceInfoMessage {
    private @NonNull String deviceId;

    public @NonNull String getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceId\" is null.");
      }
      this.deviceId = setterArg;
    }

    private @Nullable String groupId;

    public @Nullable String getGroupId() {
      return groupId;
    }

    public void setGroupId(@Nullable String setterArg) {
      this.groupId = setterArg;
    }

    private @Nullable String kind;

    public @Nullable String getKind() {
      return kind;
    }

    public void setKind(@Nullable String setterArg) {
      this.kind = setterArg;
    }

    private @NonNull String label;

    public @NonNull String getLabel() {
      return label;
    }

    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MediaDeviceInfoMessage() {}

    public static final class Builder {

      private @Nullable String deviceId;

      public @NonNull Builder setDeviceId(@NonNull String setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable String groupId;

      public @NonNull Builder setGroupId(@Nullable String setterArg) {
        this.groupId = setterArg;
        return this;
      }

      private @Nullable String kind;

      public @NonNull Builder setKind(@Nullable String setterArg) {
        this.kind = setterArg;
        return this;
      }

      private @Nullable String label;

      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }

      public @NonNull MediaDeviceInfoMessage build() {
        MediaDeviceInfoMessage pigeonReturn = new MediaDeviceInfoMessage();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setGroupId(groupId);
        pigeonReturn.setKind(kind);
        pigeonReturn.setLabel(label);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(deviceId);
      toListResult.add(groupId);
      toListResult.add(kind);
      toListResult.add(label);
      return toListResult;
    }

    static @NonNull MediaDeviceInfoMessage fromList(@NonNull ArrayList<Object> list) {
      MediaDeviceInfoMessage pigeonResult = new MediaDeviceInfoMessage();
      Object deviceId = list.get(0);
      pigeonResult.setDeviceId((String) deviceId);
      Object groupId = list.get(1);
      pigeonResult.setGroupId((String) groupId);
      Object kind = list.get(2);
      pigeonResult.setKind((String) kind);
      Object label = list.get(3);
      pigeonResult.setLabel((String) label);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class IceCandidateMessage {
    private @Nullable String candidate;

    public @Nullable String getCandidate() {
      return candidate;
    }

    public void setCandidate(@Nullable String setterArg) {
      this.candidate = setterArg;
    }

    private @Nullable String sdpMid;

    public @Nullable String getSdpMid() {
      return sdpMid;
    }

    public void setSdpMid(@Nullable String setterArg) {
      this.sdpMid = setterArg;
    }

    private @Nullable Long sdpMLineIndex;

    public @Nullable Long getSdpMLineIndex() {
      return sdpMLineIndex;
    }

    public void setSdpMLineIndex(@Nullable Long setterArg) {
      this.sdpMLineIndex = setterArg;
    }

    public static final class Builder {

      private @Nullable String candidate;

      public @NonNull Builder setCandidate(@Nullable String setterArg) {
        this.candidate = setterArg;
        return this;
      }

      private @Nullable String sdpMid;

      public @NonNull Builder setSdpMid(@Nullable String setterArg) {
        this.sdpMid = setterArg;
        return this;
      }

      private @Nullable Long sdpMLineIndex;

      public @NonNull Builder setSdpMLineIndex(@Nullable Long setterArg) {
        this.sdpMLineIndex = setterArg;
        return this;
      }

      public @NonNull IceCandidateMessage build() {
        IceCandidateMessage pigeonReturn = new IceCandidateMessage();
        pigeonReturn.setCandidate(candidate);
        pigeonReturn.setSdpMid(sdpMid);
        pigeonReturn.setSdpMLineIndex(sdpMLineIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(candidate);
      toListResult.add(sdpMid);
      toListResult.add(sdpMLineIndex);
      return toListResult;
    }

    static @NonNull IceCandidateMessage fromList(@NonNull ArrayList<Object> list) {
      IceCandidateMessage pigeonResult = new IceCandidateMessage();
      Object candidate = list.get(0);
      pigeonResult.setCandidate((String) candidate);
      Object sdpMid = list.get(1);
      pigeonResult.setSdpMid((String) sdpMid);
      Object sdpMLineIndex = list.get(2);
      pigeonResult.setSdpMLineIndex((sdpMLineIndex == null) ? null : ((sdpMLineIndex instanceof Integer) ? (Integer) sdpMLineIndex : (Long) sdpMLineIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StatsReportMessage {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Double timestamp;

    public @Nullable Double getTimestamp() {
      return timestamp;
    }

    public void setTimestamp(@Nullable Double setterArg) {
      this.timestamp = setterArg;
    }

    private @NonNull Map<dynamic, dynamic> values;

    public @NonNull Map<dynamic, dynamic> getValues() {
      return values;
    }

    public void setValues(@NonNull Map<dynamic, dynamic> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"values\" is null.");
      }
      this.values = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    StatsReportMessage() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Double timestamp;

      public @NonNull Builder setTimestamp(@Nullable Double setterArg) {
        this.timestamp = setterArg;
        return this;
      }

      private @Nullable Map<dynamic, dynamic> values;

      public @NonNull Builder setValues(@NonNull Map<dynamic, dynamic> setterArg) {
        this.values = setterArg;
        return this;
      }

      public @NonNull StatsReportMessage build() {
        StatsReportMessage pigeonReturn = new StatsReportMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setType(type);
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setValues(values);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(id);
      toListResult.add(type);
      toListResult.add(timestamp);
      toListResult.add(values);
      return toListResult;
    }

    static @NonNull StatsReportMessage fromList(@NonNull ArrayList<Object> list) {
      StatsReportMessage pigeonResult = new StatsReportMessage();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object type = list.get(1);
      pigeonResult.setType((String) type);
      Object timestamp = list.get(2);
      pigeonResult.setTimestamp((Double) timestamp);
      Object values = list.get(3);
      pigeonResult.setValues((Map<dynamic, dynamic>) values);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DataChannelMessage {
    private @NonNull String channelId;

    public @NonNull String getChannelId() {
      return channelId;
    }

    public void setChannelId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"channelId\" is null.");
      }
      this.channelId = setterArg;
    }

    private @NonNull String type;

    public @NonNull String getType() {
      return type;
    }

    public void setType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable byte[] binary;

    public @Nullable byte[] getBinary() {
      return binary;
    }

    public void setBinary(@Nullable byte[] setterArg) {
      this.binary = setterArg;
    }

    private @Nullable String text;

    public @Nullable String getText() {
      return text;
    }

    public void setText(@Nullable String setterArg) {
      this.text = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DataChannelMessage() {}

    public static final class Builder {

      private @Nullable String channelId;

      public @NonNull Builder setChannelId(@NonNull String setterArg) {
        this.channelId = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@NonNull String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable byte[] binary;

      public @NonNull Builder setBinary(@Nullable byte[] setterArg) {
        this.binary = setterArg;
        return this;
      }

      private @Nullable String text;

      public @NonNull Builder setText(@Nullable String setterArg) {
        this.text = setterArg;
        return this;
      }

      public @NonNull DataChannelMessage build() {
        DataChannelMessage pigeonReturn = new DataChannelMessage();
        pigeonReturn.setChannelId(channelId);
        pigeonReturn.setType(type);
        pigeonReturn.setBinary(binary);
        pigeonReturn.setText(text);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(channelId);
      toListResult.add(type);
      toListResult.add(binary);
      toListResult.add(text);
      return toListResult;
    }

    static @NonNull DataChannelMessage fromList(@NonNull ArrayList<Object> list) {
      DataChannelMessage pigeonResult = new DataChannelMessage();
      Object channelId = list.get(0);
      pigeonResult.setChannelId((String) channelId);
      Object type = list.get(1);
      pigeonResult.setType((String) type);
      Object binary = list.get(2);
      pigeonResult.setBinary((byte[]) binary);
      Object text = list.get(3);
      pigeonResult.setText((String) text);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DataChannelInitMessage {
    private @NonNull Long id;

    public @NonNull Long getId() {
      return id;
    }

    public void setId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull Boolean negotiated;

    public @NonNull Boolean getNegotiated() {
      return negotiated;
    }

    public void setNegotiated(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"negotiated\" is null.");
      }
      this.negotiated = setterArg;
    }

    private @NonNull String binaryType;

    public @NonNull String getBinaryType() {
      return binaryType;
    }

    public void setBinaryType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"binaryType\" is null.");
      }
      this.binaryType = setterArg;
    }

    private @NonNull String protocol;

    public @NonNull String getProtocol() {
      return protocol;
    }

    public void setProtocol(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"protocol\" is null.");
      }
      this.protocol = setterArg;
    }

    private @NonNull Boolean ordered;

    public @NonNull Boolean getOrdered() {
      return ordered;
    }

    public void setOrdered(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ordered\" is null.");
      }
      this.ordered = setterArg;
    }

    private @NonNull Long maxRetransmitTime;

    public @NonNull Long getMaxRetransmitTime() {
      return maxRetransmitTime;
    }

    public void setMaxRetransmitTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxRetransmitTime\" is null.");
      }
      this.maxRetransmitTime = setterArg;
    }

    private @NonNull Long maxRetransmits;

    public @NonNull Long getMaxRetransmits() {
      return maxRetransmits;
    }

    public void setMaxRetransmits(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxRetransmits\" is null.");
      }
      this.maxRetransmits = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DataChannelInitMessage() {}

    public static final class Builder {

      private @Nullable Long id;

      public @NonNull Builder setId(@NonNull Long setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable Boolean negotiated;

      public @NonNull Builder setNegotiated(@NonNull Boolean setterArg) {
        this.negotiated = setterArg;
        return this;
      }

      private @Nullable String binaryType;

      public @NonNull Builder setBinaryType(@NonNull String setterArg) {
        this.binaryType = setterArg;
        return this;
      }

      private @Nullable String protocol;

      public @NonNull Builder setProtocol(@NonNull String setterArg) {
        this.protocol = setterArg;
        return this;
      }

      private @Nullable Boolean ordered;

      public @NonNull Builder setOrdered(@NonNull Boolean setterArg) {
        this.ordered = setterArg;
        return this;
      }

      private @Nullable Long maxRetransmitTime;

      public @NonNull Builder setMaxRetransmitTime(@NonNull Long setterArg) {
        this.maxRetransmitTime = setterArg;
        return this;
      }

      private @Nullable Long maxRetransmits;

      public @NonNull Builder setMaxRetransmits(@NonNull Long setterArg) {
        this.maxRetransmits = setterArg;
        return this;
      }

      public @NonNull DataChannelInitMessage build() {
        DataChannelInitMessage pigeonReturn = new DataChannelInitMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setNegotiated(negotiated);
        pigeonReturn.setBinaryType(binaryType);
        pigeonReturn.setProtocol(protocol);
        pigeonReturn.setOrdered(ordered);
        pigeonReturn.setMaxRetransmitTime(maxRetransmitTime);
        pigeonReturn.setMaxRetransmits(maxRetransmits);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(id);
      toListResult.add(negotiated);
      toListResult.add(binaryType);
      toListResult.add(protocol);
      toListResult.add(ordered);
      toListResult.add(maxRetransmitTime);
      toListResult.add(maxRetransmits);
      return toListResult;
    }

    static @NonNull DataChannelInitMessage fromList(@NonNull ArrayList<Object> list) {
      DataChannelInitMessage pigeonResult = new DataChannelInitMessage();
      Object id = list.get(0);
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer) id : (Long) id));
      Object negotiated = list.get(1);
      pigeonResult.setNegotiated((Boolean) negotiated);
      Object binaryType = list.get(2);
      pigeonResult.setBinaryType((String) binaryType);
      Object protocol = list.get(3);
      pigeonResult.setProtocol((String) protocol);
      Object ordered = list.get(4);
      pigeonResult.setOrdered((Boolean) ordered);
      Object maxRetransmitTime = list.get(5);
      pigeonResult.setMaxRetransmitTime((maxRetransmitTime == null) ? null : ((maxRetransmitTime instanceof Integer) ? (Integer) maxRetransmitTime : (Long) maxRetransmitTime));
      Object maxRetransmits = list.get(6);
      pigeonResult.setMaxRetransmits((maxRetransmits == null) ? null : ((maxRetransmits instanceof Integer) ? (Integer) maxRetransmits : (Long) maxRetransmits));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HeaderExtensionMessage {
    private @Nullable String uri;

    public @Nullable String getUri() {
      return uri;
    }

    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    private @Nullable Long id;

    public @Nullable Long getId() {
      return id;
    }

    public void setId(@Nullable Long setterArg) {
      this.id = setterArg;
    }

    private @Nullable Boolean encrypted;

    public @Nullable Boolean getEncrypted() {
      return encrypted;
    }

    public void setEncrypted(@Nullable Boolean setterArg) {
      this.encrypted = setterArg;
    }

    public static final class Builder {

      private @Nullable String uri;

      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long id;

      public @NonNull Builder setId(@Nullable Long setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable Boolean encrypted;

      public @NonNull Builder setEncrypted(@Nullable Boolean setterArg) {
        this.encrypted = setterArg;
        return this;
      }

      public @NonNull HeaderExtensionMessage build() {
        HeaderExtensionMessage pigeonReturn = new HeaderExtensionMessage();
        pigeonReturn.setUri(uri);
        pigeonReturn.setId(id);
        pigeonReturn.setEncrypted(encrypted);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(uri);
      toListResult.add(id);
      toListResult.add(encrypted);
      return toListResult;
    }

    static @NonNull HeaderExtensionMessage fromList(@NonNull ArrayList<Object> list) {
      HeaderExtensionMessage pigeonResult = new HeaderExtensionMessage();
      Object uri = list.get(0);
      pigeonResult.setUri((String) uri);
      Object id = list.get(1);
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer) id : (Long) id));
      Object encrypted = list.get(2);
      pigeonResult.setEncrypted((Boolean) encrypted);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RtpEncodingMessage {
    private @NonNull Boolean active;

    public @NonNull Boolean getActive() {
      return active;
    }

    public void setActive(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"active\" is null.");
      }
      this.active = setterArg;
    }

    private @Nullable String rid;

    public @Nullable String getRid() {
      return rid;
    }

    public void setRid(@Nullable String setterArg) {
      this.rid = setterArg;
    }

    private @Nullable Long maxBitrate;

    public @Nullable Long getMaxBitrate() {
      return maxBitrate;
    }

    public void setMaxBitrate(@Nullable Long setterArg) {
      this.maxBitrate = setterArg;
    }

    private @Nullable Long minBitrate;

    public @Nullable Long getMinBitrate() {
      return minBitrate;
    }

    public void setMinBitrate(@Nullable Long setterArg) {
      this.minBitrate = setterArg;
    }

    private @Nullable Long maxFramerate;

    public @Nullable Long getMaxFramerate() {
      return maxFramerate;
    }

    public void setMaxFramerate(@Nullable Long setterArg) {
      this.maxFramerate = setterArg;
    }

    private @Nullable Long numTemporalLayers;

    public @Nullable Long getNumTemporalLayers() {
      return numTemporalLayers;
    }

    public void setNumTemporalLayers(@Nullable Long setterArg) {
      this.numTemporalLayers = setterArg;
    }

    private @Nullable Double scaleResolutionDownBy;

    public @Nullable Double getScaleResolutionDownBy() {
      return scaleResolutionDownBy;
    }

    public void setScaleResolutionDownBy(@Nullable Double setterArg) {
      this.scaleResolutionDownBy = setterArg;
    }

    private @Nullable Long ssrc;

    public @Nullable Long getSsrc() {
      return ssrc;
    }

    public void setSsrc(@Nullable Long setterArg) {
      this.ssrc = setterArg;
    }

    private @Nullable String scalabilityMode;

    public @Nullable String getScalabilityMode() {
      return scalabilityMode;
    }

    public void setScalabilityMode(@Nullable String setterArg) {
      this.scalabilityMode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RtpEncodingMessage() {}

    public static final class Builder {

      private @Nullable Boolean active;

      public @NonNull Builder setActive(@NonNull Boolean setterArg) {
        this.active = setterArg;
        return this;
      }

      private @Nullable String rid;

      public @NonNull Builder setRid(@Nullable String setterArg) {
        this.rid = setterArg;
        return this;
      }

      private @Nullable Long maxBitrate;

      public @NonNull Builder setMaxBitrate(@Nullable Long setterArg) {
        this.maxBitrate = setterArg;
        return this;
      }

      private @Nullable Long minBitrate;

      public @NonNull Builder setMinBitrate(@Nullable Long setterArg) {
        this.minBitrate = setterArg;
        return this;
      }

      private @Nullable Long maxFramerate;

      public @NonNull Builder setMaxFramerate(@Nullable Long setterArg) {
        this.maxFramerate = setterArg;
        return this;
      }

      private @Nullable Long numTemporalLayers;

      public @NonNull Builder setNumTemporalLayers(@Nullable Long setterArg) {
        this.numTemporalLayers = setterArg;
        return this;
      }

      private @Nullable Double scaleResolutionDownBy;

      public @NonNull Builder setScaleResolutionDownBy(@Nullable Double setterArg) {
        this.scaleResolutionDownBy = setterArg;
        return this;
      }

      private @Nullable Long ssrc;

      public @NonNull Builder setSsrc(@Nullable Long setterArg) {
        this.ssrc = setterArg;
        return this;
      }

      private @Nullable String scalabilityMode;

      public @NonNull Builder setScalabilityMode(@Nullable String setterArg) {
        this.scalabilityMode = setterArg;
        return this;
      }

      public @NonNull RtpEncodingMessage build() {
        RtpEncodingMessage pigeonReturn = new RtpEncodingMessage();
        pigeonReturn.setActive(active);
        pigeonReturn.setRid(rid);
        pigeonReturn.setMaxBitrate(maxBitrate);
        pigeonReturn.setMinBitrate(minBitrate);
        pigeonReturn.setMaxFramerate(maxFramerate);
        pigeonReturn.setNumTemporalLayers(numTemporalLayers);
        pigeonReturn.setScaleResolutionDownBy(scaleResolutionDownBy);
        pigeonReturn.setSsrc(ssrc);
        pigeonReturn.setScalabilityMode(scalabilityMode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(active);
      toListResult.add(rid);
      toListResult.add(maxBitrate);
      toListResult.add(minBitrate);
      toListResult.add(maxFramerate);
      toListResult.add(numTemporalLayers);
      toListResult.add(scaleResolutionDownBy);
      toListResult.add(ssrc);
      toListResult.add(scalabilityMode);
      return toListResult;
    }

    static @NonNull RtpEncodingMessage fromList(@NonNull ArrayList<Object> list) {
      RtpEncodingMessage pigeonResult = new RtpEncodingMessage();
      Object active = list.get(0);
      pigeonResult.setActive((Boolean) active);
      Object rid = list.get(1);
      pigeonResult.setRid((String) rid);
      Object maxBitrate = list.get(2);
      pigeonResult.setMaxBitrate((maxBitrate == null) ? null : ((maxBitrate instanceof Integer) ? (Integer) maxBitrate : (Long) maxBitrate));
      Object minBitrate = list.get(3);
      pigeonResult.setMinBitrate((minBitrate == null) ? null : ((minBitrate instanceof Integer) ? (Integer) minBitrate : (Long) minBitrate));
      Object maxFramerate = list.get(4);
      pigeonResult.setMaxFramerate((maxFramerate == null) ? null : ((maxFramerate instanceof Integer) ? (Integer) maxFramerate : (Long) maxFramerate));
      Object numTemporalLayers = list.get(5);
      pigeonResult.setNumTemporalLayers((numTemporalLayers == null) ? null : ((numTemporalLayers instanceof Integer) ? (Integer) numTemporalLayers : (Long) numTemporalLayers));
      Object scaleResolutionDownBy = list.get(6);
      pigeonResult.setScaleResolutionDownBy((Double) scaleResolutionDownBy);
      Object ssrc = list.get(7);
      pigeonResult.setSsrc((ssrc == null) ? null : ((ssrc instanceof Integer) ? (Integer) ssrc : (Long) ssrc));
      Object scalabilityMode = list.get(8);
      pigeonResult.setScalabilityMode((String) scalabilityMode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RtpCodecMessage {
    private @Nullable Long payloadType;

    public @Nullable Long getPayloadType() {
      return payloadType;
    }

    public void setPayloadType(@Nullable Long setterArg) {
      this.payloadType = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String kind;

    public @Nullable String getKind() {
      return kind;
    }

    public void setKind(@Nullable String setterArg) {
      this.kind = setterArg;
    }

    private @Nullable Long clockRate;

    public @Nullable Long getClockRate() {
      return clockRate;
    }

    public void setClockRate(@Nullable Long setterArg) {
      this.clockRate = setterArg;
    }

    private @Nullable Long numChannels;

    public @Nullable Long getNumChannels() {
      return numChannels;
    }

    public void setNumChannels(@Nullable Long setterArg) {
      this.numChannels = setterArg;
    }

    private @Nullable Map<dynamic, dynamic> parameters;

    public @Nullable Map<dynamic, dynamic> getParameters() {
      return parameters;
    }

    public void setParameters(@Nullable Map<dynamic, dynamic> setterArg) {
      this.parameters = setterArg;
    }

    public static final class Builder {

      private @Nullable Long payloadType;

      public @NonNull Builder setPayloadType(@Nullable Long setterArg) {
        this.payloadType = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String kind;

      public @NonNull Builder setKind(@Nullable String setterArg) {
        this.kind = setterArg;
        return this;
      }

      private @Nullable Long clockRate;

      public @NonNull Builder setClockRate(@Nullable Long setterArg) {
        this.clockRate = setterArg;
        return this;
      }

      private @Nullable Long numChannels;

      public @NonNull Builder setNumChannels(@Nullable Long setterArg) {
        this.numChannels = setterArg;
        return this;
      }

      private @Nullable Map<dynamic, dynamic> parameters;

      public @NonNull Builder setParameters(@Nullable Map<dynamic, dynamic> setterArg) {
        this.parameters = setterArg;
        return this;
      }

      public @NonNull RtpCodecMessage build() {
        RtpCodecMessage pigeonReturn = new RtpCodecMessage();
        pigeonReturn.setPayloadType(payloadType);
        pigeonReturn.setName(name);
        pigeonReturn.setKind(kind);
        pigeonReturn.setClockRate(clockRate);
        pigeonReturn.setNumChannels(numChannels);
        pigeonReturn.setParameters(parameters);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(payloadType);
      toListResult.add(name);
      toListResult.add(kind);
      toListResult.add(clockRate);
      toListResult.add(numChannels);
      toListResult.add(parameters);
      return toListResult;
    }

    static @NonNull RtpCodecMessage fromList(@NonNull ArrayList<Object> list) {
      RtpCodecMessage pigeonResult = new RtpCodecMessage();
      Object payloadType = list.get(0);
      pigeonResult.setPayloadType((payloadType == null) ? null : ((payloadType instanceof Integer) ? (Integer) payloadType : (Long) payloadType));
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object kind = list.get(2);
      pigeonResult.setKind((String) kind);
      Object clockRate = list.get(3);
      pigeonResult.setClockRate((clockRate == null) ? null : ((clockRate instanceof Integer) ? (Integer) clockRate : (Long) clockRate));
      Object numChannels = list.get(4);
      pigeonResult.setNumChannels((numChannels == null) ? null : ((numChannels instanceof Integer) ? (Integer) numChannels : (Long) numChannels));
      Object parameters = list.get(5);
      pigeonResult.setParameters((Map<dynamic, dynamic>) parameters);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RtpParametersMessage {
    private @Nullable String transactionId;

    public @Nullable String getTransactionId() {
      return transactionId;
    }

    public void setTransactionId(@Nullable String setterArg) {
      this.transactionId = setterArg;
    }

    private @Nullable RTCParametersMessage rtcp;

    public @Nullable RTCParametersMessage getRtcp() {
      return rtcp;
    }

    public void setRtcp(@Nullable RTCParametersMessage setterArg) {
      this.rtcp = setterArg;
    }

    private @Nullable List<HeaderExtensionMessage> headerExtensions;

    public @Nullable List<HeaderExtensionMessage> getHeaderExtensions() {
      return headerExtensions;
    }

    public void setHeaderExtensions(@Nullable List<HeaderExtensionMessage> setterArg) {
      this.headerExtensions = setterArg;
    }

    private @Nullable List<RtpEncodingMessage> encodings;

    public @Nullable List<RtpEncodingMessage> getEncodings() {
      return encodings;
    }

    public void setEncodings(@Nullable List<RtpEncodingMessage> setterArg) {
      this.encodings = setterArg;
    }

    private @Nullable List<RtpCodecMessage> codecs;

    public @Nullable List<RtpCodecMessage> getCodecs() {
      return codecs;
    }

    public void setCodecs(@Nullable List<RtpCodecMessage> setterArg) {
      this.codecs = setterArg;
    }

    public static final class Builder {

      private @Nullable String transactionId;

      public @NonNull Builder setTransactionId(@Nullable String setterArg) {
        this.transactionId = setterArg;
        return this;
      }

      private @Nullable RTCParametersMessage rtcp;

      public @NonNull Builder setRtcp(@Nullable RTCParametersMessage setterArg) {
        this.rtcp = setterArg;
        return this;
      }

      private @Nullable List<HeaderExtensionMessage> headerExtensions;

      public @NonNull Builder setHeaderExtensions(@Nullable List<HeaderExtensionMessage> setterArg) {
        this.headerExtensions = setterArg;
        return this;
      }

      private @Nullable List<RtpEncodingMessage> encodings;

      public @NonNull Builder setEncodings(@Nullable List<RtpEncodingMessage> setterArg) {
        this.encodings = setterArg;
        return this;
      }

      private @Nullable List<RtpCodecMessage> codecs;

      public @NonNull Builder setCodecs(@Nullable List<RtpCodecMessage> setterArg) {
        this.codecs = setterArg;
        return this;
      }

      public @NonNull RtpParametersMessage build() {
        RtpParametersMessage pigeonReturn = new RtpParametersMessage();
        pigeonReturn.setTransactionId(transactionId);
        pigeonReturn.setRtcp(rtcp);
        pigeonReturn.setHeaderExtensions(headerExtensions);
        pigeonReturn.setEncodings(encodings);
        pigeonReturn.setCodecs(codecs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(transactionId);
      toListResult.add((rtcp == null) ? null : rtcp.toList());
      toListResult.add(headerExtensions);
      toListResult.add(encodings);
      toListResult.add(codecs);
      return toListResult;
    }

    static @NonNull RtpParametersMessage fromList(@NonNull ArrayList<Object> list) {
      RtpParametersMessage pigeonResult = new RtpParametersMessage();
      Object transactionId = list.get(0);
      pigeonResult.setTransactionId((String) transactionId);
      Object rtcp = list.get(1);
      pigeonResult.setRtcp((rtcp == null) ? null : RTCParametersMessage.fromList((ArrayList<Object>) rtcp));
      Object headerExtensions = list.get(2);
      pigeonResult.setHeaderExtensions((List<HeaderExtensionMessage>) headerExtensions);
      Object encodings = list.get(3);
      pigeonResult.setEncodings((List<RtpEncodingMessage>) encodings);
      Object codecs = list.get(4);
      pigeonResult.setCodecs((List<RtpCodecMessage>) codecs);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RTCParametersMessage {
    private @NonNull String cname;

    public @NonNull String getCname() {
      return cname;
    }

    public void setCname(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cname\" is null.");
      }
      this.cname = setterArg;
    }

    private @NonNull Boolean reducedSize;

    public @NonNull Boolean getReducedSize() {
      return reducedSize;
    }

    public void setReducedSize(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reducedSize\" is null.");
      }
      this.reducedSize = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RTCParametersMessage() {}

    public static final class Builder {

      private @Nullable String cname;

      public @NonNull Builder setCname(@NonNull String setterArg) {
        this.cname = setterArg;
        return this;
      }

      private @Nullable Boolean reducedSize;

      public @NonNull Builder setReducedSize(@NonNull Boolean setterArg) {
        this.reducedSize = setterArg;
        return this;
      }

      public @NonNull RTCParametersMessage build() {
        RTCParametersMessage pigeonReturn = new RTCParametersMessage();
        pigeonReturn.setCname(cname);
        pigeonReturn.setReducedSize(reducedSize);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(cname);
      toListResult.add(reducedSize);
      return toListResult;
    }

    static @NonNull RTCParametersMessage fromList(@NonNull ArrayList<Object> list) {
      RTCParametersMessage pigeonResult = new RTCParametersMessage();
      Object cname = list.get(0);
      pigeonResult.setCname((String) cname);
      Object reducedSize = list.get(1);
      pigeonResult.setReducedSize((Boolean) reducedSize);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RtpCodecCapabilityMessage {
    private @Nullable Long channels;

    public @Nullable Long getChannels() {
      return channels;
    }

    public void setChannels(@Nullable Long setterArg) {
      this.channels = setterArg;
    }

    private @NonNull Long clockRate;

    public @NonNull Long getClockRate() {
      return clockRate;
    }

    public void setClockRate(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clockRate\" is null.");
      }
      this.clockRate = setterArg;
    }

    private @NonNull String mimeType;

    public @NonNull String getMimeType() {
      return mimeType;
    }

    public void setMimeType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mimeType\" is null.");
      }
      this.mimeType = setterArg;
    }

    private @Nullable String sdpFmtpLine;

    public @Nullable String getSdpFmtpLine() {
      return sdpFmtpLine;
    }

    public void setSdpFmtpLine(@Nullable String setterArg) {
      this.sdpFmtpLine = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RtpCodecCapabilityMessage() {}

    public static final class Builder {

      private @Nullable Long channels;

      public @NonNull Builder setChannels(@Nullable Long setterArg) {
        this.channels = setterArg;
        return this;
      }

      private @Nullable Long clockRate;

      public @NonNull Builder setClockRate(@NonNull Long setterArg) {
        this.clockRate = setterArg;
        return this;
      }

      private @Nullable String mimeType;

      public @NonNull Builder setMimeType(@NonNull String setterArg) {
        this.mimeType = setterArg;
        return this;
      }

      private @Nullable String sdpFmtpLine;

      public @NonNull Builder setSdpFmtpLine(@Nullable String setterArg) {
        this.sdpFmtpLine = setterArg;
        return this;
      }

      public @NonNull RtpCodecCapabilityMessage build() {
        RtpCodecCapabilityMessage pigeonReturn = new RtpCodecCapabilityMessage();
        pigeonReturn.setChannels(channels);
        pigeonReturn.setClockRate(clockRate);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setSdpFmtpLine(sdpFmtpLine);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(channels);
      toListResult.add(clockRate);
      toListResult.add(mimeType);
      toListResult.add(sdpFmtpLine);
      return toListResult;
    }

    static @NonNull RtpCodecCapabilityMessage fromList(@NonNull ArrayList<Object> list) {
      RtpCodecCapabilityMessage pigeonResult = new RtpCodecCapabilityMessage();
      Object channels = list.get(0);
      pigeonResult.setChannels((channels == null) ? null : ((channels instanceof Integer) ? (Integer) channels : (Long) channels));
      Object clockRate = list.get(1);
      pigeonResult.setClockRate((clockRate == null) ? null : ((clockRate instanceof Integer) ? (Integer) clockRate : (Long) clockRate));
      Object mimeType = list.get(2);
      pigeonResult.setMimeType((String) mimeType);
      Object sdpFmtpLine = list.get(3);
      pigeonResult.setSdpFmtpLine((String) sdpFmtpLine);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RtpHeaderExtensionCapabilityMessage {
    private @NonNull String uri;

    public @NonNull String getUri() {
      return uri;
    }

    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RtpHeaderExtensionCapabilityMessage() {}

    public static final class Builder {

      private @Nullable String uri;

      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }

      public @NonNull RtpHeaderExtensionCapabilityMessage build() {
        RtpHeaderExtensionCapabilityMessage pigeonReturn = new RtpHeaderExtensionCapabilityMessage();
        pigeonReturn.setUri(uri);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(uri);
      return toListResult;
    }

    static @NonNull RtpHeaderExtensionCapabilityMessage fromList(@NonNull ArrayList<Object> list) {
      RtpHeaderExtensionCapabilityMessage pigeonResult = new RtpHeaderExtensionCapabilityMessage();
      Object uri = list.get(0);
      pigeonResult.setUri((String) uri);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RtpCapabilitiesMessage {
    private @Nullable List<RtpCodecCapabilityMessage> codecs;

    public @Nullable List<RtpCodecCapabilityMessage> getCodecs() {
      return codecs;
    }

    public void setCodecs(@Nullable List<RtpCodecCapabilityMessage> setterArg) {
      this.codecs = setterArg;
    }

    private @Nullable List<RtpHeaderExtensionCapabilityMessage> headerExtensions;

    public @Nullable List<RtpHeaderExtensionCapabilityMessage> getHeaderExtensions() {
      return headerExtensions;
    }

    public void setHeaderExtensions(@Nullable List<RtpHeaderExtensionCapabilityMessage> setterArg) {
      this.headerExtensions = setterArg;
    }

    private @Nullable List<String> fecMechanisms;

    public @Nullable List<String> getFecMechanisms() {
      return fecMechanisms;
    }

    public void setFecMechanisms(@Nullable List<String> setterArg) {
      this.fecMechanisms = setterArg;
    }

    public static final class Builder {

      private @Nullable List<RtpCodecCapabilityMessage> codecs;

      public @NonNull Builder setCodecs(@Nullable List<RtpCodecCapabilityMessage> setterArg) {
        this.codecs = setterArg;
        return this;
      }

      private @Nullable List<RtpHeaderExtensionCapabilityMessage> headerExtensions;

      public @NonNull Builder setHeaderExtensions(@Nullable List<RtpHeaderExtensionCapabilityMessage> setterArg) {
        this.headerExtensions = setterArg;
        return this;
      }

      private @Nullable List<String> fecMechanisms;

      public @NonNull Builder setFecMechanisms(@Nullable List<String> setterArg) {
        this.fecMechanisms = setterArg;
        return this;
      }

      public @NonNull RtpCapabilitiesMessage build() {
        RtpCapabilitiesMessage pigeonReturn = new RtpCapabilitiesMessage();
        pigeonReturn.setCodecs(codecs);
        pigeonReturn.setHeaderExtensions(headerExtensions);
        pigeonReturn.setFecMechanisms(fecMechanisms);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(codecs);
      toListResult.add(headerExtensions);
      toListResult.add(fecMechanisms);
      return toListResult;
    }

    static @NonNull RtpCapabilitiesMessage fromList(@NonNull ArrayList<Object> list) {
      RtpCapabilitiesMessage pigeonResult = new RtpCapabilitiesMessage();
      Object codecs = list.get(0);
      pigeonResult.setCodecs((List<RtpCodecCapabilityMessage>) codecs);
      Object headerExtensions = list.get(1);
      pigeonResult.setHeaderExtensions((List<RtpHeaderExtensionCapabilityMessage>) headerExtensions);
      Object fecMechanisms = list.get(2);
      pigeonResult.setFecMechanisms((List<String>) fecMechanisms);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ThumbnailSizeMessage {
    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ThumbnailSizeMessage() {}

    public static final class Builder {

      private @Nullable Long width;

      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      public @NonNull ThumbnailSizeMessage build() {
        ThumbnailSizeMessage pigeonReturn = new ThumbnailSizeMessage();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(width);
      toListResult.add(height);
      return toListResult;
    }

    static @NonNull ThumbnailSizeMessage fromList(@NonNull ArrayList<Object> list) {
      ThumbnailSizeMessage pigeonResult = new ThumbnailSizeMessage();
      Object width = list.get(0);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(1);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DesktopCapturerSourceMessage {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull String type;

    public @NonNull String getType() {
      return type;
    }

    public void setType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull ThumbnailSizeMessage thumbnailSizeMessage;

    public @NonNull ThumbnailSizeMessage getThumbnailSizeMessage() {
      return thumbnailSizeMessage;
    }

    public void setThumbnailSizeMessage(@NonNull ThumbnailSizeMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"thumbnailSizeMessage\" is null.");
      }
      this.thumbnailSizeMessage = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DesktopCapturerSourceMessage() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@NonNull String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable ThumbnailSizeMessage thumbnailSizeMessage;

      public @NonNull Builder setThumbnailSizeMessage(@NonNull ThumbnailSizeMessage setterArg) {
        this.thumbnailSizeMessage = setterArg;
        return this;
      }

      public @NonNull DesktopCapturerSourceMessage build() {
        DesktopCapturerSourceMessage pigeonReturn = new DesktopCapturerSourceMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setType(type);
        pigeonReturn.setThumbnailSizeMessage(thumbnailSizeMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(id);
      toListResult.add(name);
      toListResult.add(type);
      toListResult.add((thumbnailSizeMessage == null) ? null : thumbnailSizeMessage.toList());
      return toListResult;
    }

    static @NonNull DesktopCapturerSourceMessage fromList(@NonNull ArrayList<Object> list) {
      DesktopCapturerSourceMessage pigeonResult = new DesktopCapturerSourceMessage();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object type = list.get(2);
      pigeonResult.setType((String) type);
      Object thumbnailSizeMessage = list.get(3);
      pigeonResult.setThumbnailSizeMessage((thumbnailSizeMessage == null) ? null : ThumbnailSizeMessage.fromList((ArrayList<Object>) thumbnailSizeMessage));
      return pigeonResult;
    }
  }

  private static class RTCPeerconnectionFactoryApiCodec extends StandardMessageCodec {
    public static final RTCPeerconnectionFactoryApiCodec INSTANCE = new RTCPeerconnectionFactoryApiCodec();

    private RTCPeerconnectionFactoryApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return RtpCapabilitiesMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return RtpCodecCapabilityMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return RtpHeaderExtensionCapabilityMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return dynamic.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof RtpCapabilitiesMessage) {
        stream.write(128);
        writeValue(stream, ((RtpCapabilitiesMessage) value).toList());
      } else if (value instanceof RtpCodecCapabilityMessage) {
        stream.write(129);
        writeValue(stream, ((RtpCodecCapabilityMessage) value).toList());
      } else if (value instanceof RtpHeaderExtensionCapabilityMessage) {
        stream.write(130);
        writeValue(stream, ((RtpHeaderExtensionCapabilityMessage) value).toList());
      } else if (value instanceof dynamic) {
        stream.write(131);
        writeValue(stream, ((dynamic) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RTCPeerconnectionFactoryApi {

    @NonNull 
    String createPeerconnection(@NonNull Map<String, dynamic> configuration, @NonNull Map<String, dynamic> constraints);

    @NonNull 
    RtpCapabilitiesMessage getRtpReceiverCapabilities(@NonNull String kind);

    @NonNull 
    RtpCapabilitiesMessage getRtpSenderCapabilities(@NonNull String kind);

    /** The codec used by RTCPeerconnectionFactoryApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return RTCPeerconnectionFactoryApiCodec.INSTANCE;
    }
    /**Sets up an instance of `RTCPeerconnectionFactoryApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RTCPeerconnectionFactoryApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCPeerconnectionFactoryApi.createPeerconnection", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Map<String, dynamic> configurationArg = (Map<String, dynamic>) args.get(0);
                Map<String, dynamic> constraintsArg = (Map<String, dynamic>) args.get(1);
                try {
                  String output = api.createPeerconnection(configurationArg, constraintsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCPeerconnectionFactoryApi.getRtpReceiverCapabilities", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String kindArg = (String) args.get(0);
                try {
                  RtpCapabilitiesMessage output = api.getRtpReceiverCapabilities(kindArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCPeerconnectionFactoryApi.getRtpSenderCapabilities", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String kindArg = (String) args.get(0);
                try {
                  RtpCapabilitiesMessage output = api.getRtpSenderCapabilities(kindArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class RtcPeerconnectionApiCodec extends StandardMessageCodec {
    public static final RtcPeerconnectionApiCodec INSTANCE = new RtcPeerconnectionApiCodec();

    private RtcPeerconnectionApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AudioTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AudioTrackSettingsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ConfigurationMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ConstraintsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return DataChannelInitMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return IceCandidateMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return MediaStreamMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return SessionDescriptionMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return SessionDescriptionMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return StatsReportMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return VideoTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return VideoTrackSettingsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return dynamic.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AudioTrackMessage) {
        stream.write(128);
        writeValue(stream, ((AudioTrackMessage) value).toList());
      } else if (value instanceof AudioTrackSettingsMessage) {
        stream.write(129);
        writeValue(stream, ((AudioTrackSettingsMessage) value).toList());
      } else if (value instanceof ConfigurationMessage) {
        stream.write(130);
        writeValue(stream, ((ConfigurationMessage) value).toList());
      } else if (value instanceof ConstraintsMessage) {
        stream.write(131);
        writeValue(stream, ((ConstraintsMessage) value).toList());
      } else if (value instanceof DataChannelInitMessage) {
        stream.write(132);
        writeValue(stream, ((DataChannelInitMessage) value).toList());
      } else if (value instanceof IceCandidateMessage) {
        stream.write(133);
        writeValue(stream, ((IceCandidateMessage) value).toList());
      } else if (value instanceof MediaStreamMessage) {
        stream.write(134);
        writeValue(stream, ((MediaStreamMessage) value).toList());
      } else if (value instanceof SessionDescriptionMessage) {
        stream.write(135);
        writeValue(stream, ((SessionDescriptionMessage) value).toList());
      } else if (value instanceof SessionDescriptionMessage) {
        stream.write(136);
        writeValue(stream, ((SessionDescriptionMessage) value).toList());
      } else if (value instanceof StatsReportMessage) {
        stream.write(137);
        writeValue(stream, ((StatsReportMessage) value).toList());
      } else if (value instanceof VideoTrackMessage) {
        stream.write(138);
        writeValue(stream, ((VideoTrackMessage) value).toList());
      } else if (value instanceof VideoTrackSettingsMessage) {
        stream.write(139);
        writeValue(stream, ((VideoTrackSettingsMessage) value).toList());
      } else if (value instanceof dynamic) {
        stream.write(140);
        writeValue(stream, ((dynamic) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RtcPeerconnectionApi {

    void addCandidate(@NonNull String peerconnectionId, @NonNull IceCandidateMessage msg);

    void addStream(@NonNull String peerconnectionId, @NonNull String streamId);

    @NonNull 
    Map<String, dynamic> addTrack(@NonNull String peerconnectionId, @NonNull String trackId, @Nullable List<String> streamIds);

    void close(@NonNull String peerconnectionId);

    @NonNull 
    SessionDescriptionMessage createAnswer(@NonNull String peerconnectionId, @NonNull ConstraintsMessage msg);

    @NonNull 
    Map<String, dynamic> createDataChannel(@NonNull String peerconnectionId, @NonNull String label, @NonNull DataChannelInitMessage msg);

    @NonNull 
    SessionDescriptionMessage createOffer(@NonNull String peerconnectionId, @NonNull ConstraintsMessage msg);

    void dispose(@NonNull String peerconnectionId);

    @Nullable 
    SessionDescriptionMessage getLocalDescription(@NonNull String peerconnectionId);

    @NonNull 
    List<MediaStreamMessage> getLocalStreams(@NonNull String peerconnectionId);

    @NonNull 
    List<MediaStreamMessage> getRemoteStreams(@NonNull String peerconnectionId);

    @NonNull 
    List<Map<String, dynamic>> getReceivers(@NonNull String peerconnectionId);

    @NonNull 
    List<Map<String, dynamic>> getSenders(@NonNull String peerconnectionId);

    @NonNull 
    List<Map<String, dynamic>> getTransceivers(@NonNull String peerconnectionId);

    @NonNull 
    List<StatsReportMessage> getStats(@NonNull String peerconnectionId, @NonNull String trackId);

    void removeStream(@NonNull String peerconnectionId, @NonNull String streamId);

    @NonNull 
    Boolean removeTrack(@NonNull String peerconnectionId, @NonNull String senderId);

    void restartIce(@NonNull String peerconnectionId);

    void setConfiguration(@NonNull String peerconnectionId, @NonNull ConfigurationMessage msg);

    void setLocalDescription(@NonNull String peerconnectionId, @NonNull SessionDescriptionMessage msg);

    @NonNull 
    SessionDescriptionMessage getRemoteDescription(@NonNull String peerconnectionId);

    void setRemoteDescription(@NonNull String peerconnectionId, @NonNull SessionDescriptionMessage msg);

    /** The codec used by RtcPeerconnectionApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return RtcPeerconnectionApiCodec.INSTANCE;
    }
    /**Sets up an instance of `RtcPeerconnectionApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RtcPeerconnectionApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.addCandidate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                IceCandidateMessage msgArg = (IceCandidateMessage) args.get(1);
                try {
                  api.addCandidate(peerconnectionIdArg, msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.addStream", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String streamIdArg = (String) args.get(1);
                try {
                  api.addStream(peerconnectionIdArg, streamIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.addTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String trackIdArg = (String) args.get(1);
                List<String> streamIdsArg = (List<String>) args.get(2);
                try {
                  Map<String, dynamic> output = api.addTrack(peerconnectionIdArg, trackIdArg, streamIdsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.close", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  api.close(peerconnectionIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.createAnswer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                ConstraintsMessage msgArg = (ConstraintsMessage) args.get(1);
                try {
                  SessionDescriptionMessage output = api.createAnswer(peerconnectionIdArg, msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.createDataChannel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String labelArg = (String) args.get(1);
                DataChannelInitMessage msgArg = (DataChannelInitMessage) args.get(2);
                try {
                  Map<String, dynamic> output = api.createDataChannel(peerconnectionIdArg, labelArg, msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.createOffer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                ConstraintsMessage msgArg = (ConstraintsMessage) args.get(1);
                try {
                  SessionDescriptionMessage output = api.createOffer(peerconnectionIdArg, msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  api.dispose(peerconnectionIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getLocalDescription", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  SessionDescriptionMessage output = api.getLocalDescription(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getLocalStreams", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  List<MediaStreamMessage> output = api.getLocalStreams(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getRemoteStreams", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  List<MediaStreamMessage> output = api.getRemoteStreams(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getReceivers", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  List<Map<String, dynamic>> output = api.getReceivers(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getSenders", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  List<Map<String, dynamic>> output = api.getSenders(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getTransceivers", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  List<Map<String, dynamic>> output = api.getTransceivers(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getStats", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String trackIdArg = (String) args.get(1);
                try {
                  List<StatsReportMessage> output = api.getStats(peerconnectionIdArg, trackIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.removeStream", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String streamIdArg = (String) args.get(1);
                try {
                  api.removeStream(peerconnectionIdArg, streamIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.removeTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String senderIdArg = (String) args.get(1);
                try {
                  Boolean output = api.removeTrack(peerconnectionIdArg, senderIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.restartIce", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  api.restartIce(peerconnectionIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.setConfiguration", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                ConfigurationMessage msgArg = (ConfigurationMessage) args.get(1);
                try {
                  api.setConfiguration(peerconnectionIdArg, msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.setLocalDescription", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                SessionDescriptionMessage msgArg = (SessionDescriptionMessage) args.get(1);
                try {
                  api.setLocalDescription(peerconnectionIdArg, msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.getRemoteDescription", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  SessionDescriptionMessage output = api.getRemoteDescription(peerconnectionIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RtcPeerconnectionApi.setRemoteDescription", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                SessionDescriptionMessage msgArg = (SessionDescriptionMessage) args.get(1);
                try {
                  api.setRemoteDescription(peerconnectionIdArg, msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class RTCDataChannelApiCodec extends StandardMessageCodec {
    public static final RTCDataChannelApiCodec INSTANCE = new RTCDataChannelApiCodec();

    private RTCDataChannelApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DataChannelMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DataChannelMessage) {
        stream.write(128);
        writeValue(stream, ((DataChannelMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RTCDataChannelApi {

    void send(@NonNull String peerconnectionId, @NonNull DataChannelMessage message);

    void close(@NonNull String peerconnectionId);

    /** The codec used by RTCDataChannelApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return RTCDataChannelApiCodec.INSTANCE;
    }
    /**Sets up an instance of `RTCDataChannelApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RTCDataChannelApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCDataChannelApi.send", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                DataChannelMessage messageArg = (DataChannelMessage) args.get(1);
                try {
                  api.send(peerconnectionIdArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCDataChannelApi.close", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                try {
                  api.close(peerconnectionIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RTCDTMFSenderApi {

    void insertDtmf(@NonNull String peerconnectionId, @NonNull String rtpSenderId, @NonNull String tones, @NonNull Long duration, @NonNull Long interToneGap);

    @NonNull 
    Boolean canInsertDtmf(@NonNull String peerconnectionId, @NonNull String rtpSenderId);

    /** The codec used by RTCDTMFSenderApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `RTCDTMFSenderApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RTCDTMFSenderApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCDTMFSenderApi.insertDtmf", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String rtpSenderIdArg = (String) args.get(1);
                String tonesArg = (String) args.get(2);
                Number durationArg = (Number) args.get(3);
                Number interToneGapArg = (Number) args.get(4);
                try {
                  api.insertDtmf(peerconnectionIdArg, rtpSenderIdArg, tonesArg, (durationArg == null) ? null : durationArg.longValue(), (interToneGapArg == null) ? null : interToneGapArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCDTMFSenderApi.canInsertDtmf", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String rtpSenderIdArg = (String) args.get(1);
                try {
                  Boolean output = api.canInsertDtmf(peerconnectionIdArg, rtpSenderIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class RTCRtpSenderApiCodec extends StandardMessageCodec {
    public static final RTCRtpSenderApiCodec INSTANCE = new RTCRtpSenderApiCodec();

    private RTCRtpSenderApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return HeaderExtensionMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return RTCParametersMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return RtpCodecMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return RtpEncodingMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return RtpParametersMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return dynamic.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof HeaderExtensionMessage) {
        stream.write(128);
        writeValue(stream, ((HeaderExtensionMessage) value).toList());
      } else if (value instanceof RTCParametersMessage) {
        stream.write(129);
        writeValue(stream, ((RTCParametersMessage) value).toList());
      } else if (value instanceof RtpCodecMessage) {
        stream.write(130);
        writeValue(stream, ((RtpCodecMessage) value).toList());
      } else if (value instanceof RtpEncodingMessage) {
        stream.write(131);
        writeValue(stream, ((RtpEncodingMessage) value).toList());
      } else if (value instanceof RtpParametersMessage) {
        stream.write(132);
        writeValue(stream, ((RtpParametersMessage) value).toList());
      } else if (value instanceof dynamic) {
        stream.write(133);
        writeValue(stream, ((dynamic) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RTCRtpSenderApi {

    @NonNull 
    Boolean setParameters(@NonNull String peerconnectionId, @NonNull String rtpSenderId, @NonNull RtpParametersMessage parameters);

    void replaceTrack(@NonNull String peerconnectionId, @NonNull String rtpSenderId, @NonNull String trackId);

    void setTrack(@NonNull String peerconnectionId, @NonNull String rtpSenderId, @NonNull String trackId, @NonNull Boolean takeOwnership);

    /** The codec used by RTCRtpSenderApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return RTCRtpSenderApiCodec.INSTANCE;
    }
    /**Sets up an instance of `RTCRtpSenderApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RTCRtpSenderApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpSenderApi.setParameters", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String rtpSenderIdArg = (String) args.get(1);
                RtpParametersMessage parametersArg = (RtpParametersMessage) args.get(2);
                try {
                  Boolean output = api.setParameters(peerconnectionIdArg, rtpSenderIdArg, parametersArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpSenderApi.replaceTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String rtpSenderIdArg = (String) args.get(1);
                String trackIdArg = (String) args.get(2);
                try {
                  api.replaceTrack(peerconnectionIdArg, rtpSenderIdArg, trackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpSenderApi.setTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String rtpSenderIdArg = (String) args.get(1);
                String trackIdArg = (String) args.get(2);
                Boolean takeOwnershipArg = (Boolean) args.get(3);
                try {
                  api.setTrack(peerconnectionIdArg, rtpSenderIdArg, trackIdArg, takeOwnershipArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class RTCRtpTransceiverApiCodec extends StandardMessageCodec {
    public static final RTCRtpTransceiverApiCodec INSTANCE = new RTCRtpTransceiverApiCodec();

    private RTCRtpTransceiverApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return RtpCodecCapabilityMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof RtpCodecCapabilityMessage) {
        stream.write(128);
        writeValue(stream, ((RtpCodecCapabilityMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RTCRtpTransceiverApi {

    void setDirection(@NonNull String peerconnectionId, @NonNull String transceiverId, @NonNull String direction);

    @Nullable 
    String getCurrentDirection(@NonNull String peerconnectionId, @NonNull String transceiverId);

    @NonNull 
    String getDirection(@NonNull String peerconnectionId, @NonNull String transceiverId);

    void stop(@NonNull String peerconnectionId, @NonNull String transceiverId);

    void setCodecPreferences(@NonNull String peerconnectionId, @NonNull String transceiverId, @NonNull List<RtpCodecCapabilityMessage> codecs);

    /** The codec used by RTCRtpTransceiverApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return RTCRtpTransceiverApiCodec.INSTANCE;
    }
    /**Sets up an instance of `RTCRtpTransceiverApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RTCRtpTransceiverApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpTransceiverApi.setDirection", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String transceiverIdArg = (String) args.get(1);
                String directionArg = (String) args.get(2);
                try {
                  api.setDirection(peerconnectionIdArg, transceiverIdArg, directionArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpTransceiverApi.getCurrentDirection", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String transceiverIdArg = (String) args.get(1);
                try {
                  String output = api.getCurrentDirection(peerconnectionIdArg, transceiverIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpTransceiverApi.getDirection", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String transceiverIdArg = (String) args.get(1);
                try {
                  String output = api.getDirection(peerconnectionIdArg, transceiverIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpTransceiverApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String transceiverIdArg = (String) args.get(1);
                try {
                  api.stop(peerconnectionIdArg, transceiverIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCRtpTransceiverApi.setCodecPreferences", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String peerconnectionIdArg = (String) args.get(0);
                String transceiverIdArg = (String) args.get(1);
                List<RtpCodecCapabilityMessage> codecsArg = (List<RtpCodecCapabilityMessage>) args.get(2);
                try {
                  api.setCodecPreferences(peerconnectionIdArg, transceiverIdArg, codecsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RTCVideoRendererApi {

    @Nullable 
    Long initialize();

    void setSrcObject(@NonNull Long textureId, @NonNull String streamId, @NonNull String ownerTag, @Nullable String trackId);

    void dispose(@NonNull Long textureId);

    /** The codec used by RTCVideoRendererApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `RTCVideoRendererApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RTCVideoRendererApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCVideoRendererApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.initialize();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCVideoRendererApi.setSrcObject", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number textureIdArg = (Number) args.get(0);
                String streamIdArg = (String) args.get(1);
                String ownerTagArg = (String) args.get(2);
                String trackIdArg = (String) args.get(3);
                try {
                  api.setSrcObject((textureIdArg == null) ? null : textureIdArg.longValue(), streamIdArg, ownerTagArg, trackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RTCVideoRendererApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number textureIdArg = (Number) args.get(0);
                try {
                  api.dispose((textureIdArg == null) ? null : textureIdArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MediaRecorderApi {

    void start(@NonNull String path, @NonNull Long audioChannel, @Nullable String videoTrackId, @NonNull Long recorderId, @Nullable String peerconnectionId);

    void stop(@NonNull Long recorderId);

    /** The codec used by MediaRecorderApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `MediaRecorderApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MediaRecorderApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaRecorderApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String pathArg = (String) args.get(0);
                Number audioChannelArg = (Number) args.get(1);
                String videoTrackIdArg = (String) args.get(2);
                Number recorderIdArg = (Number) args.get(3);
                String peerconnectionIdArg = (String) args.get(4);
                try {
                  api.start(pathArg, (audioChannelArg == null) ? null : audioChannelArg.longValue(), videoTrackIdArg, (recorderIdArg == null) ? null : recorderIdArg.longValue(), peerconnectionIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaRecorderApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number recorderIdArg = (Number) args.get(0);
                try {
                  api.stop((recorderIdArg == null) ? null : recorderIdArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MediaStreamApi {

    void getMediaTracks(@NonNull String streamId);

    void addTrack(@NonNull String streamId, @NonNull String trackId);

    void removeTrack(@NonNull String streamId, @NonNull String trackId);

    void dispose(@NonNull String streamId);

    /** The codec used by MediaStreamApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `MediaStreamApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MediaStreamApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamApi.getMediaTracks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String streamIdArg = (String) args.get(0);
                try {
                  api.getMediaTracks(streamIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamApi.addTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String streamIdArg = (String) args.get(0);
                String trackIdArg = (String) args.get(1);
                try {
                  api.addTrack(streamIdArg, trackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamApi.removeTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String streamIdArg = (String) args.get(0);
                String trackIdArg = (String) args.get(1);
                try {
                  api.removeTrack(streamIdArg, trackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String streamIdArg = (String) args.get(0);
                try {
                  api.dispose(streamIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MediaStreamTrackApi {

    void enable(@NonNull String trackId, @NonNull Boolean enabled, @NonNull String peerconnectionId);

    @NonNull 
    Boolean hasTorch(@NonNull String trackId);

    void setTorch(@NonNull String trackId, @NonNull Boolean torch);

    void captureFrame(@NonNull String trackId, @NonNull String peerconnectionId, @NonNull String path);

    void stop(@NonNull String trackId);

    /** The codec used by MediaStreamTrackApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `MediaStreamTrackApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MediaStreamTrackApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamTrackApi.enable", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String trackIdArg = (String) args.get(0);
                Boolean enabledArg = (Boolean) args.get(1);
                String peerconnectionIdArg = (String) args.get(2);
                try {
                  api.enable(trackIdArg, enabledArg, peerconnectionIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamTrackApi.hasTorch", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String trackIdArg = (String) args.get(0);
                try {
                  Boolean output = api.hasTorch(trackIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamTrackApi.setTorch", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String trackIdArg = (String) args.get(0);
                Boolean torchArg = (Boolean) args.get(1);
                try {
                  api.setTorch(trackIdArg, torchArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamTrackApi.captureFrame", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String trackIdArg = (String) args.get(0);
                String peerconnectionIdArg = (String) args.get(1);
                String pathArg = (String) args.get(2);
                try {
                  api.captureFrame(trackIdArg, peerconnectionIdArg, pathArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaStreamTrackApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String trackIdArg = (String) args.get(0);
                try {
                  api.stop(trackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class DesktopCapturerSourceApiCodec extends StandardMessageCodec {
    public static final DesktopCapturerSourceApiCodec INSTANCE = new DesktopCapturerSourceApiCodec();

    private DesktopCapturerSourceApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DesktopCapturerSourceMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ThumbnailSizeMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DesktopCapturerSourceMessage) {
        stream.write(128);
        writeValue(stream, ((DesktopCapturerSourceMessage) value).toList());
      } else if (value instanceof ThumbnailSizeMessage) {
        stream.write(129);
        writeValue(stream, ((ThumbnailSizeMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface DesktopCapturerSourceApi {

    @NonNull 
    List<DesktopCapturerSourceMessage> getDesktopSources(@NonNull List<String> types, @NonNull ThumbnailSizeMessage thumbnailSize);

    @NonNull 
    Boolean updateSources(@NonNull List<String> types);

    @Nullable 
    byte[] getThumbnail(@NonNull String sourceId, @NonNull ThumbnailSizeMessage thumbnailSize);

    /** The codec used by DesktopCapturerSourceApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DesktopCapturerSourceApiCodec.INSTANCE;
    }
    /**Sets up an instance of `DesktopCapturerSourceApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable DesktopCapturerSourceApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.DesktopCapturerSourceApi.getDesktopSources", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> typesArg = (List<String>) args.get(0);
                ThumbnailSizeMessage thumbnailSizeArg = (ThumbnailSizeMessage) args.get(1);
                try {
                  List<DesktopCapturerSourceMessage> output = api.getDesktopSources(typesArg, thumbnailSizeArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.DesktopCapturerSourceApi.updateSources", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> typesArg = (List<String>) args.get(0);
                try {
                  Boolean output = api.updateSources(typesArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.DesktopCapturerSourceApi.getThumbnail", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String sourceIdArg = (String) args.get(0);
                ThumbnailSizeMessage thumbnailSizeArg = (ThumbnailSizeMessage) args.get(1);
                try {
                  byte[] output = api.getThumbnail(sourceIdArg, thumbnailSizeArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MediaDevicesCodec extends StandardMessageCodec {
    public static final MediaDevicesCodec INSTANCE = new MediaDevicesCodec();

    private MediaDevicesCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AudioTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AudioTrackSettingsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return MediaDeviceInfoMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MediaStreamMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return VideoTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return VideoTrackSettingsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return dynamic.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AudioTrackMessage) {
        stream.write(128);
        writeValue(stream, ((AudioTrackMessage) value).toList());
      } else if (value instanceof AudioTrackSettingsMessage) {
        stream.write(129);
        writeValue(stream, ((AudioTrackSettingsMessage) value).toList());
      } else if (value instanceof MediaDeviceInfoMessage) {
        stream.write(130);
        writeValue(stream, ((MediaDeviceInfoMessage) value).toList());
      } else if (value instanceof MediaStreamMessage) {
        stream.write(131);
        writeValue(stream, ((MediaStreamMessage) value).toList());
      } else if (value instanceof VideoTrackMessage) {
        stream.write(132);
        writeValue(stream, ((VideoTrackMessage) value).toList());
      } else if (value instanceof VideoTrackSettingsMessage) {
        stream.write(133);
        writeValue(stream, ((VideoTrackSettingsMessage) value).toList());
      } else if (value instanceof dynamic) {
        stream.write(134);
        writeValue(stream, ((dynamic) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MediaDevices {

    @NonNull 
    MediaStreamMessage getUserMedia(@NonNull Map<String, dynamic> mediaConstraints);

    @NonNull 
    MediaStreamMessage getDisplayMedia(@NonNull Map<String, dynamic> mediaConstraints);

    @NonNull 
    List<dynamic> getSources();

    @NonNull 
    List<MediaDeviceInfoMessage> enumerateDevices();

    @NonNull 
    MediaDeviceInfoMessage selectAudioOutput(@NonNull String deviceId);

    /** The codec used by MediaDevices. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MediaDevicesCodec.INSTANCE;
    }
    /**Sets up an instance of `MediaDevices` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MediaDevices api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaDevices.getUserMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Map<String, dynamic> mediaConstraintsArg = (Map<String, dynamic>) args.get(0);
                try {
                  MediaStreamMessage output = api.getUserMedia(mediaConstraintsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaDevices.getDisplayMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Map<String, dynamic> mediaConstraintsArg = (Map<String, dynamic>) args.get(0);
                try {
                  MediaStreamMessage output = api.getDisplayMedia(mediaConstraintsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaDevices.getSources", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<dynamic> output = api.getSources();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaDevices.enumerateDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<MediaDeviceInfoMessage> output = api.enumerateDevices();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MediaDevices.selectAudioOutput", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String deviceIdArg = (String) args.get(0);
                try {
                  MediaDeviceInfoMessage output = api.selectAudioOutput(deviceIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
